searchState.loadedDescShard("lax", 0, "Safe Rust wrapper for LAPACK without external dependency.\nTrait for primitive types which implements LAPACK …\nFactorize symmetric/Hermitian matrix using Bunch-Kaufman …\nFactorize positive-definite symmetric/Hermitian matrices …\nSolve symmetric/Hermitian positive-definite linear …\nEigenvalue problem for general matricies\nCompute right eigenvalue and eigenvectors for a general …\nEigenvalue problem for symmetric/Hermitian matricies\nCompute right eigenvalue and eigenvectors for a symmetric …\nGeneralized eigenvalue problem for symmetric/Hermitian …\nCompute right eigenvalue and eigenvectors for a symmetric …\nCharactor flags, e.g. <code>&#39;T&#39;</code>, used in LAPACK API\nExecute Householder reflection as the first step of …\nCompute inverse matrix $A^{-1}$ from the output of …\nCompute inverse matrix $A^{-1}$ using $U$ or $L$ …\nCompute inverse matrix $A^{-1}$ using the result of …\nMemory layout of matrices\nLeast squares\nCompute a vector $x$ which minimizes Euclidian norm $| Ax …\nSolve least square problems $\\argmin_X | AX - B|$\nComputes the LU decomposition of a general $m \\times n$ …\nComputes the LU factorization of a tridiagonal <code>m x n</code> …\nOperator norm\nCompute norm of matrices\nReconstruct Q-matrix from Householder-reflectors\nQR decomposition\nExecute QR-decomposition at once\nReciprocal conditional number\nEstimates the the reciprocal of the condition number of …\nSolve linear equations using LU-decomposition\nSolve linear equations $Ax = b$ using the output of …\nSolve linear equation $Ax = b$ using $U$ or $L$ calculated …\nFactorize symmetric/Hermitian matrix using Bunch-Kaufman …\nSolve symmetric/Hermitian linear equation $Ax = b$ using …\nSingular-value decomposition\nCompute singular-value decomposition (SVD)\nCompute singular value decomposition with …\nCompute singular value decomposition (SVD) with …\nLinear problem for triangular matrices\nImplement linear solver using LU decomposition for …\nCompute Cholesky decomposition according to UPLO\nCompute inverse matrix using Cholesky factroization result\nSolve linear equation using Cholesky factroization result\nOwned result of eigenvalue problem by EigWork::eval\nReference result of eigenvalue problem by EigWork::calc\nEigenvalue problem for general matrix\nHelper trait for implementing EigWork methods\nCompute eigenvalues and vectors on this working memory.\nEigenvalues\nEigenvalues\nEigenvalues\nImaginary part of eigenvalues used in real routines\nReal part of eigenvalues used in real routines\nCompute eigenvalues and vectors by consuming this working …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute left eigenvectors or not\nCompute right eigenvectors or not\nProblem size\nCreate new working memory for eigenvalues compution.\nWorking memory with <code>T::Real</code>\nLeft eigenvectors\nRight eigenvectors\nLeft eigenvectors\nLeft eigenvectors\nRight eigenvectors\nRight eigenvectors\nLeft eigenvectors used in real routines\nRight eigenvectors used in real routines\nWorking memory\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nStrides of the array is not supported\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalculate eigenvectors in addition to eigenvalues\nAll $m$ columns of $U$, and/or all $n$ rows of $V^T$.\nSpecify whether input triangular matrix is unit or not\nFlag for calculating eigenvectors or not\nSpecifies how many singular vectors are computed\nNon-unit triangular matrix. Its diagonal elements may be …\nDo not calculate eigenvectors. Only calculate eigenvalues.\nNo columns of $U$ and/or rows of $V^T$.\nThe first $\\min(m, n)$ columns of $U$ and/or the first …\nUpper/Lower specification for seveal usages\nUnit triangular matrix, i.e. all diagonal elements of the …\nTo use Fortran LAPACK API in lapack-sys crate\nTo use Fortran LAPACK API in lapack-sys crate\nTo use Fortran LAPACK API in lapack-sys crate\nTo use Fortran LAPACK API in lapack-sys crate\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIn-place transpose of a square matrix by keeping F/C layout\nTranspose without changing memory representation\nOut-place transpose for general matrix\nOut-place transpose for general matrix\nResult of LeastSquares\nResult of LeastSquares\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe rank of the input matrix A\nThe rank of the input matrix A\nsingular values\nsingular values\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWorking memory for computing inverse matrix\nHelper trait to abstract <code>*getri</code> LAPACK rotuines for …\nHelper trait to abstract <code>*getrf</code> LAPACK routines for …\nHelper trait to abstract <code>*getrs</code> LAPACK routines for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLAPACK correspondance\nFactorize symmetric/Hermitian matrix using Bunch-Kaufman …\nCompute inverse matrix of symmetric/Hermitian matrix\nSolve symmetric/Hermitian linear equation\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSolve linear problem for triangular matrices\nRepresents the LU factorization of a tridiagonal matrix <code>A</code> …\nRepresents a tridiagonal matrix as 3 one-dimensional …\nA tridiagonal matrix which consists of\n(n) diagonal elements of matrix.\n(n-1) sub-diagonal elements of matrix.\n(n-1) super-diagonal elements of matrix.\n(n-2) elements of the second super-diagonal of U.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe pivot indices that define the permutation matrix <code>P</code>.\nlayout of raw matrix")