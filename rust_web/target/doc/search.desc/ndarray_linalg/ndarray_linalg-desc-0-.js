searchState.loadedDescShard("ndarray_linalg", 0, "The <code>ndarray-linalg</code> crate provides linear algebra …\nAssertions for array\nCholesky decomposition of Hermitian (or real symmetric) …\nutilities for convert array\nVector as a Diagonal matrix\nEigenvalue decomposition for non-symmetric square matrices\nEigendecomposition for Hermitian matrices.\nDefine Errors\nGenerator functions for matrices\nKrylov subspace methods\nConvert ndarray into LAPACK-compatible matrix format\nLeast Squares\nNorm of vectors\nLinear operator algebra\nOperator norm\nQR decomposition\nSolve systems of linear equations and invert matrices\nSolve Hermitian (or real symmetric) linear problems and …\nSingular-value decomposition (SVD)\nSingular-value decomposition (SVD) by divide-and-conquer …\nTrace calculation\nMethods for triangular matrices\nVectors as a Tridiagonal matrix &amp; Methods for tridiagonal …\nBasic types and their methods for linear algebra\ncheck two values are close in terms of the absolute …\ncheck two arrays are close in L1 norm\ncheck two arrays are close in L2 norm\ncheck two arrays are close in maximum norm\ncheck two values are close in terms of the relative …\nCholesky decomposition of Hermitian (or real symmetric) …\nCholesky decomposition of Hermitian (or real symmetric) …\nCholesky decomposition of Hermitian (or real symmetric) …\nCholesky decomposition of Hermitian (or real symmetric) …\nDeterminant of Hermitian (or real symmetric) positive …\nDeterminant of Hermitian (or real symmetric) positive …\nCholesky decomposition of Hermitian (or real symmetric) …\nCholesky decomposition of Hermitian (or real symmetric) …\nInverse of Hermitian (or real symmetric) positive definite …\nInverse of Hermitian (or real symmetric) positive definite …\nSolve systems of linear equations with Hermitian (or real …\nUpper/Lower specification for seveal usages\nTo use Fortran LAPACK API in lapack-sys crate\nComputes the Cholesky decomposition of the Hermitian (or …\nComputes the Cholesky decomposition of the Hermitian (or …\nComputes the Cholesky decomposition of the Hermitian (or …\nComputes the determinant of the Hermitian (or real …\nComputes the determinant of the Hermitian (or real …\n<code>L</code> from the decomposition <code>A = L * L^H</code> or <code>U</code> from the …\nComputes the Cholesky decomposition of the Hermitian (or …\nComputes the Cholesky decomposition of the Hermitian (or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>L</code> from the Cholesky decomposition <code>A = L * L^H</code>.\nReturns <code>U</code> from the Cholesky decomposition <code>A = U^H * U</code>.\nComputes the inverse of the Hermitian (or real symmetric) …\nComputes the inverse of the Hermitian (or real symmetric) …\nComputes the natural log of the determinant of the …\nComputes the natural log of the determinant of the …\nSolves a system of linear equations <code>A * x = b</code> with …\nSolves a system of linear equations <code>A * x = b</code> with …\nSolves a system of linear equations <code>A * x = b</code> with …\nIf this is <code>UPLO::Lower</code>, then <code>self.factor</code> is <code>L</code>. If this is …\nVector as a Diagonal matrix\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEigenvalue decomposition of general matrix reference\nEigVec is the right eivenvector\nCalculate eigenvalues without eigenvectors\nCalculate eigenvalues with the right eigenvector\nCalculate eigenvalues without eigenvectors\nCalculate eigenvalues without eigenvectors\nCalculate eigenvalues without eigenvectors\nEigenvalue decomposition of Hermite matrix reference\nEigenvalue decomposition of mutable reference of Hermite …\nEigenvalue decomposition of Hermite matrix\nCalculate symmetric square-root matrix using <code>eigh</code>\nCalculate symmetric square-root matrix using <code>eigh</code>\nContains the error value\nStrides of the array is not supported\nLAPACK subroutine returns non-zero code\nMaster Error type of this crate\nMemory is not aligned continously\nMatrix is not square\nObj cannot be made from a (rows, cols) matrix\nContains the success value\nStrides of the array is not supported\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHermite conjugate matrix\nconstruct matrix from diag\nstack vectors into matrix horizontally\nGenerate random array with given shape\nRandom Hermite matrix\nRandom Hermite matrix with given RNG\nRandom Hermite Positive-definite matrix\nRandom Hermite Positive-definite matrix with given RNG\nGenerate random regular matrix\nGenerate random regular matrix with given RNG\nGenerate random unitary matrix using QR decomposition\nGenerate random unitary matrix using QR decomposition with …\nGenerate random array with given RNG\nstack vectors into matrix vertically\nInner Product\nInner product `(self.conjugate, rhs)\nArray type for coefficients to the current basis\nOrthogonalize dependent vector without adding to Q, i.e. R …\nH-matrix\nTrait for creating orthogonal basis from iterator of arrays\nQ-matrix\nR-matrix\nSkip dependent vector\nStrategy for linearly dependent vectors appearing in …\nTerminate iteration if dependent vector comes\nAdd new vector if the residual is larger than relative …\nArnoldi iteration\nCalculate the coefficient to the current basis basis\nDecompose given vector into the span of current basis and …\nDimension of input array\nAdd new vector if the residual is larger than relative …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet Q-matrix of generated basis\nHouseholder reflection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncheck if the basis spans entire space\nNumber of cached basis\nModified Gram-Schmit orthogonalizer\nOnline QR decomposition using arbitrary orthogonalizer\nExecute Arnoldi iteration as Rust iterator\nUtility to execute Arnoldi iteration with Householder …\nUtility to execute Arnoldi iteration with modified …\nIterate until convergent\nDimension of Krylov subspace\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an Arnoldi iterator from any linear operator <code>a</code>\nIterative orthogonalizer using Householder reflection\nTake backward reflection <code>P = P_1 ... P_l</code>\nCalc a reflactor <code>w</code> from a vector <code>x</code>\nTake forward reflection <code>P = P_l ... P_1</code>\nReturns the argument unchanged.\nOnline QR decomposition using Householder reflection\nCalls <code>U::from(self)</code>.\nCreate a new orthogonalizer\nTake a reflection <code>P = I - 2ww^T</code>\nIterative orthogonalizer using modified Gram-Schmit …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOnline QR decomposition using modified Gram-Schmit …\nCreate an empty orthogonalizer\nReturns Ok iff the matrix is square (without computing the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTranspose without changing memory representation\nResult of a LeastSquares computation\nSolve least squares for immutable references\nSolve least squares for mutable references, overwriting …\nSolve least squares for owned matrices\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSolve a least squares problem of the form <code>Ax = rhs</code> by …\nSolve a least squares problem of the form <code>Ax = rhs</code> by …\nSolve a least squares problem of the form <code>Ax = rhs</code> by …\nThe rank of the matrix A in <code>Ax = b</code>\nIf n &lt; m and rank(A) == n, the sum of squares If b is a (m …\nThe singular values of the matrix A in <code>Ax = b</code>\nThe solution vector or matrix <code>x</code> which is the best solution …\nThe result of the eigensolver\nTruncated eigenproblem solver\nFind largest or smallest eigenvalues\nTruncated singular value decomposition\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEigenvalue solver for large symmetric positive definite …\nDefine norm as a metric linear space (not as a matrix)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nrename of <code>norm_l2</code>\nL-1 norm\nL-2 norm\nmaximum norm\nnormalize in L2 norm\nAbstracted linear operator as an action to vector (…\nApply operator out-place\nApply operator to matrix out-place\nApply operator to matrix with move\nApply operator to matrix in-place\nApply operator with move\nApply operator in-place\nOperator norm using <code>*lange</code> LAPACK routines\nthe value of norm\nTo use Fortran LAPACK API in lapack-sys crate\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthe Frobenius norm of a matrix (square root of sum of …\nthe infinity norm of a matrix (maximum row sum)\nthe one norm of a matrix (maximum column sum)\nQR decomposition for matrix reference\nQR decomposition\nQR decomposition for square matrix reference\nQR decomposition for mutable reference of square matrix\nQR decomposition for square matrix\nUpper/Lower specification for seveal usages\nAn interface for calculating determinants of matrix refs.\nAn interface for calculating determinants of matrices.\nAn interface for computing LU factorizations of matrix …\nAn interface for computing LU factorizations of matrices.\nAn interface for inverting matrix refs.\nAn interface for inverting matrices.\nRepresents the LU factorization of a matrix <code>A</code> as <code>A = P*L*U</code>.\nAn interface for <em>estimating</em> the reciprocal condition …\nAn interface for <em>estimating</em> the reciprocal condition …\nAn interface for solving systems of linear equations.\nTo use Fortran LAPACK API in lapack-sys crate\nComputes the determinant of the matrix.\nComputes the determinant of the matrix.\nComputes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …\nComputes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the inverse of the matrix.\nComputes the inverse of the matrix.\n<em>Estimates</em> the reciprocal of the condition number of the …\n<em>Estimates</em> the reciprocal of the condition number of the …\nComputes the <code>(sign, natural_log)</code> of the determinant of the …\nComputes the <code>(sign, natural_log)</code> of the determinant of the …\nSolves a system of linear equations <code>A * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A^H * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A^H * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A^H * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A^T * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A^T * x = b</code> where <code>A</code> is …\nSolves a system of linear equations <code>A^T * x = b</code> where <code>A</code> is …\nRepresents the Bunch–Kaufman factorization of a …\nAn interface for calculating determinants of Hermitian (or …\nAn interface for calculating determinants of Hermitian (or …\nThe element type of the matrix.\nThe element type of the matrix.\nAn interface for computing the Bunch–Kaufman …\nAn interface for computing the Bunch–Kaufman …\nAn interface for inverting Hermitian (or real symmetric) …\nAn interface for inverting Hermitian (or real symmetric) …\nAn interface for solving systems of Hermitian (or real …\nUpper/Lower specification for seveal usages\nComputes the determinant of the Hermitian (or real …\nComputes the determinant of the factorized Hermitian (or …\nComputes the determinant of the Hermitian (or real …\nComputes the determinant of the factorized Hermitian (or …\nComputes the Bunch–Kaufman factorization of a Hermitian …\nComputes the Bunch–Kaufman factorization of a Hermitian …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the inverse of the Hermitian (or real symmetric) …\nComputes the inverse of the Hermitian (or real symmetric) …\nComputes the <code>(sign, natural_log)</code> of the determinant of the …\nComputes the <code>(sign, natural_log)</code> of the determinant of the …\nComputes the <code>(sign, natural_log)</code> of the determinant of the …\nComputes the <code>(sign, natural_log)</code> of the determinant of the …\nSolves a system of linear equations <code>A * x = b</code> with …\nSolves a system of linear equations <code>A * x = b</code> with …\nSolves a system of linear equations <code>A * x = b</code> with …\nsingular-value decomposition of matrix reference\nsingular-value decomposition for mutable reference of …\nsingular-value decomposition\nAll $m$ columns of $U$, and/or all $n$ rows of $V^T$.\nSpecifies how many singular vectors are computed\nNo columns of $U$ and/or rows of $V^T$.\nSingular-value decomposition of matrix (copying) by …\nSingular-value decomposition of matrix reference by …\nSingular-value decomposition of matrix by …\nThe first $\\min(m, n)$ columns of $U$ and/or the first …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecify whether input triangular matrix is unit or not\nNon-unit triangular matrix. Its diagonal elements may be …\nsolve a triangular system with upper triangular matrix\nsolve a triangular system with upper triangular matrix\nsolve a triangular system with upper triangular matrix\nUnit triangular matrix, i.e. all diagonal elements of the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn interface for calculating determinants of tridiagonal …\nAn interface for making a Tridiagonal struct.\nAn interface for computing LU factorizations of …\nAn interface for computing LU factorizations of …\nRepresents the LU factorization of a tridiagonal matrix <code>A</code> …\nAn interface for <em>estimating</em> the reciprocal condition …\nAn interface for <em>estimating</em> the reciprocal condition …\nRepresents a tridiagonal matrix as 3 one-dimensional …\nA tridiagonal matrix which consists of\n(n) diagonal elements of matrix.\nComputes the determinant of the matrix. Unlike <code>.det()</code> of …\n(n-1) sub-diagonal elements of matrix.\n(n-1) super-diagonal elements of matrix.\n(n-2) elements of the second super-diagonal of U.\nExtract tridiagonal elements and layout of the raw matrix.\nComputes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …\nComputes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe pivot indices that define the permutation matrix <code>P</code>.\nlayout of raw matrix\n<em>Estimates</em> the reciprocal of the condition number of the …\n<em>Estimates</em> the reciprocal of the condition number of the …\nSolves a system of linear equations <code>A^H * x = b</code> with …\nSolves a system of linear equations <code>A^H * x = b</code> tridiagonal\nSolves a system of linear equations <code>A^H * x = b</code> with …\nSolves a system of linear equations <code>A^T * x = b</code> with …\nSolves a system of linear equations <code>A^T * x = b</code> tridiagonal\nSolves a system of linear equations <code>A^T * x = b</code> with …\nSolves a system of linear equations <code>A * x = b</code> with …\nSolves a system of linear equations <code>A * x = b</code> tridiagonal …\nSolves a system of linear equations <code>A * x = b</code> with …\nTrait for primitive types which implements LAPACK …\nAbsolute value\nAs a complex number\nFactorize symmetric/Hermitian matrix using Bunch-Kaufman …\nAlias for a <code>Complex&lt;f32&gt;</code>\nAlias for a <code>Complex&lt;f64&gt;</code>\nSolve symmetric/Hermitian positive-definite linear …\nCreate a new complex number\nComplex conjugate\nCompute right eigenvalue and eigenvectors for a general …\nCompute right eigenvalue and eigenvectors for a symmetric …\nCompute right eigenvalue and eigenvectors for a symmetric …\nExecute Householder reflection as the first step of …\nImaginary part\nImaginary portion of the complex number\nImaginary portion of the complex number\nCompute inverse matrix $A^{-1}$ from the output of …\nCompute inverse matrix $A^{-1}$ using $U$ or $L$ …\nCompute inverse matrix $A^{-1}$ using the result of …\nCompute a vector $x$ which minimizes Euclidian norm $| Ax …\nSolve least square problems $\\argmin_X | AX - B|$\nComputes the LU decomposition of a general $m \\times n$ …\nComputes the LU factorization of a tridiagonal <code>m x n</code> …\nCompute norm of matrices\nReconstruct Q-matrix from Householder-reflectors\nExecute QR-decomposition at once\nGenerate an random number from …\nEstimates the the reciprocal of the condition number of …\nReal part\nReal portion of the complex number\nReal portion of the complex number\nCreate a new real number\nSolve linear equations $Ax = b$ using the output of …\nSolve linear equation $Ax = b$ using $U$ or $L$ calculated …\nSolve symmetric/Hermitian linear equation $Ax = b$ using …\nSqaure of absolute value\nCompute singular-value decomposition (SVD)\nCompute singular value decomposition (SVD) with …")