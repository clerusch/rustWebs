searchState.loadedDescShard("openqasm", 0, "This crate implements a parser, type-checker and …\nA generic error type for this crate. This collects all the …\nRepresents a collection of generic errors.\nA trait to convert a specific result type into a generic …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert any errors in this type to generic errors.\nThe addition of two expressions.\nProhibit optimizations crossing this point.\nA classical register declaration.\nApply a CNOT gate between two registers.\nPerform an action conditional on a classical register …\nThe cosine of an expression.\nA declaration of some kind.\nA gate definition.\nThe division of two expressions.\nThe exponential of an expression.\nA parameter expression.\nRepresents a span of code in a file.\nApply a defined gate to some qubits.\nAn <code>include</code> statement. These are usually resolved by the …\nAn integer.\nThe natural logarithm of an expression.\nMeasure a quantum register and store the result in a …\nThe multiplication of two expressions.\nThe negation of an expression.\nThe circle constant Pi.\nThe exponentiation of two expressions.\nRepresents a whole program with defintions and statements. …\nA quantum register declaration.\nAn arbitrary real number.\nA reference to (or definition of) a register or qubit.\nReset a quantum register to the |0&gt; state.\nThe sine of an expression.\nAn object with an attached span. The span references where …\nThe square root of an expression.\nA statement that represents an action.\nA top-level statement.\nThe subtraction of two expressions.\nAn interned string constant.\nThe tangent of an expression.\nApply a universal single-qubit unitary to a register.\nA defined parameter.\nGet a string representation of this symbol.\nReturn a reference to a symbol. Useful when you have Box …\nThe declarations in this program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe index to select if <code>Some</code> variant given, <code>None</code> represents …\nThe actual object itself.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the register.\nCreate a new symbol from string data by interning it.\nThe span corresponding to this object.\nClone the symbol to make a new symbol. This is relatively …\nType-check this whole program.\nThe names of the arguments to take.\nThe content of the definition. A value of <code>None</code> represents …\nThe file to include.\nThe gate name.\nThe names of parameters to take.\nThe register name and size.\nThe register name and size.\nHandle the requests with a custom function.\nAll requests result in an error.\nThe query was unsuccessful.\nThe action to take when a file is requested by the parser.\nThe result of a custom file query.\nRequests are made to the filesystem relative to the …\nAll requests except top-level ones are silently ignored.\nA successful query, but there is no source to parse.\nThe token at this location is invalid.\nAn error produced during parsing.\nParser for OpenQASM 2.0 programs.\nCan’t read the file, the custom handler had an error.\nCan’t read the file, the filesystem had an error.\nCan’t read the file, the parser is sandboxed.\nA cache for source strings and files.\nA successful query, and the provided source should be …\nA token was expected at this location.\nThe token at this location was unexpected.\nStop the parser and return any errors encountered or the …\nCreate <code>FilePolicy::FileSystem</code> with “qelib1.inc” …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the path of the file that this <code>FileSpan</code> belongs to.\nGet the source code that is referred to by a <code>FileSpan</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an empty cache.\nConstruct a new parser that will add source to the given …\nAttempt to parse the file at the given path.\nAttempt to parse the given source code. If a path is …\nIf this is a <code>FileSystem</code> variant, add a file to the …\nSet the file policy for this parser. The default is …\nThe following files are hardcoded and should be used if …\nA value could not be converted from float to rational …\nA binary operation encountered in an <code>Expr</code>.\nA division by zero happened while computing this parameter.\nCompanion trait to <code>ProgramVisitor</code>.\nOutput format from <code>Linearize</code>.\nHigh-level translation interface.\nAn error that occured while linearizing a program. This …\nThe type of error that occurred while linearizing.\nThis expression had an overflow.\nA <code>CX</code> gate or opaque gate was called with non-distinct …\nLow-level translation interface for definitions and …\nAn unary operation encountered in an <code>Expr</code>.\nA value of type a + b * pi, with a, b rationals.\nThe rational part of the value.\nThe pi-rational part of the value.\nAttempt to divide this value by another, failing if the …\nNegate this value.\nAttempt to find a power of this value, failing if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to convert a floating point number into a <code>Value</code>. …\nCreate a <code>Value</code> from the given integer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis argument overlaps with the other.\nThis argument overlaps with the other.\nThis comparison is out of range.\nThis index is invalid for this register.\nThis sequence of definitions is recursive.\nThis argument name has already been used.\nThis gate has already been defined.\nThis parameter name has already been used.\nThis register has already been declared.\nAn error produced during type-checking.\nThis gate is undefined.\nThis parameter is undefined.\nThis register is undefined.\nThis statement has the wrong number of arguments.\nThis operand’s size doesn’t match the others in this …\nThis statement has the wrong number of parameters.\nThis operand has the wrong type.\nA register has been declared with size zero.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe actual number of arguments.\nThe actual number of parameters.\nThe correct number of arguments.\nThe correct number of parameters.\nWhether or not the operand is supposed to be classical.\nThese definitions form a cycle. The first component refers …\nThe index being accessed.\nThe size of the operand it should match.\nReference to the operand it needs to match.\nThe classical register being compared.\nThe size of the register.\nThe size of this operand.\nThe size of the register.\nReference to this operand.\nThe constant value it is compared to.\nThe size of the constant value.")