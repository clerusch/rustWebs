searchState.loadedDescShard("rust_web", 0, "Add an edge and simplify if necessary to remove parallel …\nAdd an edge with the given type\nAdd a vertex with the given name and VData struct\nAdds a value to the phase of a vertex\nAdd a vertex with the given type\nAdd a vertex with the given VData struct\nAdd a vertex to the graph with the given type and phase\nExchange inputs and outputs and reverse all phases\nAppends the given graph to the current one, with fresh …\nReturns vertices in the components of g\nReturns max row of any vertex\nGet iterator over all edges\nReturns the argument unchanged.\nList of boundary vertices which serve as inputs\nMutable list of boundary vertices which serve as inputs\nCalls <code>U::from(self)</code>.\nChecks if the given graph only consists of wires from the …\nInitialise a new empty graph\nNumber of edges\nNumber of vertices\nList of boundary vertices which serve as outputs\nMutable list of boundary vertices which serve as outputs\nReturns the phase of vertex <code>v</code>\nPlug the given graph into the outputs and multiply scalars\nPlug the given basis vertex into the i-th input.\nPlug the given list of normalised basis elements in as …\nPlug the given basis vertex into the i-th output.\nPlug the given list of normalised basis elements in as …\nReplace a boundary vertex with the given basis element\nRemove an edge from a graph\nRemove a vertex from a graph\nSet inputs for the graph\nSet outputs for the graph\nSet the phase of a vertex\nReturns the full subgraph containing the given vertices\nReturn number of Z or X spiders with non-Clifford phase\nSame as GraphLike::adjoint(), but return as a copy\nReturn a graphviz-friendly string representation of the …\nGet iterator over all vertices\nNext fresh vertex index\nConvert all X spiders to Z with the colour-change rule\nCreates a chain of spiders of the same type with optional …\nRepresents a detection web in a ZX diagram\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the detection webs for the graph\nThe underlying ZX graph\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the graph to RG form (Red-Green form) This …\nCreate a new DetectionWebs instance from a ZX graph\nAn element of the field F2 (0 or 1)\nA matrix over F2 (the field with 2 elements)\nAdd column c0 to column c1\nSwap columns c0 and c1\nGet the number of columns\nThe underlying data of the matrix, stored as a vector of …\nFactorize the matrix into m0 * m1 where m0.cols() = …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new matrix from raw u8 data\nPerform Gaussian elimination\nGet the value at the specified position\nCreate an identity matrix of size n x n\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCompute the inverse of the matrix if it exists\nCreate a new matrix from raw data\nCompute a basis for the nullspace of the matrix\nPermute columns according to permutation p\nPermute rows according to permutation p\nCompute the rank of the matrix using Gaussian elimination\nAdd row r0 to row r1\nSwap rows r0 and r1\nGet the number of rows\nSet the value at the specified position\nSolve the linear system M * x = b\nCreate a unit vector of size d with a 1 at position i\nVertically stack this matrix with another matrix\nCreate a zero matrix of size m x n\nDraw a graph with Pauli web overlaid and save to file\nRepresents a Pauli web in a ZX diagram\nMaps edge (from, to) to Pauli operator Note: from &lt; to to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the Pauli operator for an edge between two nodes\nGet the color to use when drawing an edge\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new empty PauliWeb\nSet the Pauli operator for an edge between two nodes\nExports a graph to a TikZ file for LaTeX visualization")