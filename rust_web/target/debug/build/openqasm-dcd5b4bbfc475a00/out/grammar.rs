// auto-generated: "lalrpop 0.19.12"
// sha3: 25b332cf6dfe568dbdc48c226550e5db0e45c6e280e5e0ec807302b8c9c502f4
use crate::ast::{Program, Decl, Stmt, Expr, Reg, Span, FileSpan, Symbol};
use super::Token;
#[allow(unused_extern_crates)]
extern crate lalrpop_util as __lalrpop_util;
#[allow(unused_imports)]
use self::__lalrpop_util::state_machine as __state_machine;
extern crate core;
extern crate alloc;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__Included {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::ast::{Program, Decl, Stmt, Expr, Reg, Span, FileSpan, Symbol};
    use super::super::Token;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<>
     {
        Variant0(Token),
        Variant1(Symbol),
        Variant2(u64),
        Variant3(f32),
        Variant4((Token, Token)),
        Variant5(core::option::Option<(Token, Token)>),
        Variant6(Span<Expr>),
        Variant7(alloc::vec::Vec<Span<Expr>>),
        Variant8(Span<Symbol>),
        Variant9(alloc::vec::Vec<Span<Symbol>>),
        Variant10(Span<Reg>),
        Variant11(alloc::vec::Vec<Span<Reg>>),
        Variant12(usize),
        Variant13(Decl),
        Variant14(Expr),
        Variant15(Program),
        Variant16(Vec<Span<Expr>>),
        Variant17(Vec<Span<Symbol>>),
        Variant18(Reg),
        Variant19(Vec<Span<Reg>>),
        Variant20(Span<Decl>),
        Variant21(alloc::vec::Vec<Span<Decl>>),
        Variant22(Span<u64>),
        Variant23(Span<Stmt>),
        Variant24(alloc::vec::Vec<Span<Stmt>>),
        Variant25(Stmt),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 56, 57, 0, 0, 0, 5, 0, 6, 0, 7, 58, 8, 0, 9, 10, 0, 11, 12, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 57, 0, 0, 0, 5, 0, 6, 0, 7, 58, 8, 0, 9, 10, 0, 11, 12, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 2
        14, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0,
        // State 3
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 13
        22, -61, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 14
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 57, 0, 0, 0, 5, 0, 6, 0, 7, 58, 8, 0, 9, 10, 0, 11, 12, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 15
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 17
        28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, -56, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 19
        28, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0,
        // State 20
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 21
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 22
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 57, 0, 0, 0, 5, 0, 6, 0, 7, 58, 8, 0, 9, 10, 0, 11, 12, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 26
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 59, 0, 0, 0,
        // State 27
        0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 29
        0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 30
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 31
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 32
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 33
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 34
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 35
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 36
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 37
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 38
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 39
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 40
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 41
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 0, 0,
        // State 44
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 57, 0, 0, 0, 5, 0, 0, 0, 0, 58, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 0, 151, 59, 0, 0, 0,
        // State 45
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 86, 0, 0, 0, 87, 0, 0, 88, 0, 0, 89, 90, 91, 0, 0, 59, 92, 93, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 57, 0, 0, 0, 5, 0, 0, 0, 0, 58, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 0, 154, 59, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 57, 0, 0, 0, 5, 0, 0, 0, 0, 58, 0, 0, 9, 0, 0, 0, 12, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, 0, -70, 0, 0, 0, -70, 0, -70, 0, -70, -70, -70, 0, -70, -70, 0, -70, -70, 0, 0, 0, 0, 0, -70, 0, 0, 0,
        // State 50
        -79, -79, 0, 0, -79, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, -79, 0, 0, 0,
        // State 51
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, -73, 0, 0, 0, -73, 0, -73, 0, -73, -73, -73, 0, -73, -73, 0, -73, -73, 0, 0, 0, 0, 0, -73, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, -27, 0, 0, 0, -27, 0, -27, 0, -27, -27, -27, 0, -27, -27, 0, -27, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82, 0, 0, 0, -82, 0, -82, 0, -82, -82, -82, 0, -82, -82, 0, -82, -82, 0, 0, 0, 0, -82, -82, 0, 0, 0,
        // State 55
        0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 58
        -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, 0, 0, 0, -48, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, -48, 0, 0, 0,
        // State 59
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, -74, 0, 0, 0, -74, 0, -74, 0, -74, -74, -74, 0, -74, -74, 0, -74, -74, 0, 0, 0, 0, 0, -74, 0, 0, 0,
        // State 60
        0, 0, 0, 0, -59, 0, -59, 0, -59, -59, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, -81, 0, -81, 0, -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 97, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, -75, 0, -75, -75, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, -44, -44, -44, -44, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        0, -47, -47, -47, -47, -47, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, -30, -78, -30, -30, -30, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, -34, -34, -34, -34, -34, 0, -34, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, -33, -33, -33, -33, -33, 0, -33, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, -32, -32, -32, -32, -32, 0, -32, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, -62, 0, 31, 106, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        0, 0, 34, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        0, -31, -31, -31, -31, -31, 0, -31, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, -53, -53, -53, -53, -53, 0, -53, 0, 0, 0, 0, 0, 0, -53, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, -58, -58, -58, -58, -58, 0, -58, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 93
        0, 0, 0, 31, 42, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 113, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, -92, 0, 0, 0, -92, 0, -92, 0, -92, -92, -92, 0, -92, -92, 0, -92, -92, 0, 0, 0, 0, -92, -92, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, -23, 0, 0, 0, -23, 0, -23, 0, -23, -23, -23, 0, -23, -23, 0, -23, -23, 0, 0, 0, 0, 0, -23, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21, 0, 0, 0, -21, 0, -21, 0, -21, -21, -21, 0, -21, -21, 0, -21, -21, 0, 0, 0, 0, 0, -21, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, -22, 0, 0, 0, -22, 0, -22, 0, -22, -22, -22, 0, -22, -22, 0, -22, -22, 0, 0, 0, 0, 0, -22, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91, 0, 0, 0, -91, 0, -91, 0, -91, -91, -91, 0, -91, -91, 0, -91, -91, 0, 0, 0, 0, -91, -91, 0, 0, 0,
        // State 102
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, -93, 0, 0, 0, -93, 0, -93, 0, -93, -93, -93, 0, -93, -93, 0, -93, -93, 0, 0, 0, 0, -93, -93, 0, 0, 0,
        // State 103
        0, -63, 0, 31, 119, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 104
        0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0,
        // State 105
        -7, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, -7, 0, 0, 0, -7, 0, 0, -7, 0, 0, -7, -7, -7, 0, 0, -7, -7, -7, 0,
        // State 106
        0, 126, 0, -75, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, 0, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, -77, -77, -77, -77, -77, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, -42, -42, -42, -42, -42, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0, 0, 0,
        // State 113
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0,
        // State 114
        0, -65, 0, 0, 137, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0,
        // State 115
        0, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        0, 0, 0, 0, 0, 0, 0, 0, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 118
        -8, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, -8, 0, 0, 0, -8, 0, 0, -8, 0, 0, -8, -8, -8, 0, 0, -8, -8, -8, 0,
        // State 119
        0, -78, -78, -78, -78, -78, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, -28, 34, -28, -28, -28, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        0, -29, 34, -29, -29, -29, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, -43, -43, -43, -43, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, -45, -45, -45, -45, -45, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, -46, -46, -46, -46, -46, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, -41, -41, -41, -41, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 143, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 144, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 145, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 146, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 147, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, 148, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, -60, 0, -60, 0, -60, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 133
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89, 0, 0, 0, -89, 0, -89, 0, -89, -89, -89, 0, -89, -89, 0, -89, -89, 0, 0, 0, 0, -89, -89, 0, 0, 0,
        // State 134
        0, 0, 0, 31, 46, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 135
        0, -66, 0, 0, 149, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0,
        // State 137
        0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, -57, 0, 0, 0,
        // State 138
        0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, -90, 0, 0, 0, -90, 0, -90, 0, -90, -90, -90, 0, -90, -90, 0, -90, -90, 0, 0, 0, 0, -90, -90, 0, 0, 0,
        // State 141
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24, 0, 0, 0, -24, 0, -24, 0, -24, -24, -24, 0, -24, -24, 0, -24, -24, 0, 0, 0, 0, 0, -24, 0, 0, 0,
        // State 142
        0, -36, -36, -36, -36, -36, 0, -36, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, -38, -38, -38, -38, -38, 0, -38, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, -39, -39, -39, -39, -39, 0, -39, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, -35, -35, -35, -35, -35, 0, -35, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, -40, -40, -40, -40, -40, 0, -40, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, -37, -37, -37, -37, -37, 0, -37, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85, 0, 0, 0, -85, 0, 0, 0, 0, -85, 0, 0, -85, 0, 0, 0, -85, 0, 0, 0, 0, -85, -85, 0, 0, 0,
        // State 150
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, -25, 0, 0, 0, -25, 0, -25, 0, -25, -25, -25, 0, -25, -25, 0, -25, -25, 0, 0, 0, 0, 0, -25, 0, 0, 0,
        // State 151
        0, 49, 0, 31, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86, 0, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, -86, 0, 0, 0, -86, 0, 0, 0, 0, -86, -86, 0, 0, 0,
        // State 153
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, -26, 0, 0, 0, -26, 0, -26, 0, -26, -26, -26, 0, -26, -26, 0, -26, -26, 0, 0, 0, 0, 0, -26, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, -94, 0, 0, 0, -94, 0, -94, 0, -94, -94, -94, 0, -94, -94, 0, -94, -94, 0, 0, 0, 0, -94, -94, 0, 0, 0,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 156
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, -88, 0, 0, 0, -88, 0, -88, 0, -88, -88, -88, 0, -88, -88, 0, -88, -88, 0, 0, 0, 0, -88, -88, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 38 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        -51,
        // State 1
        -52,
        // State 2
        0,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        -49,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        -50,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        0,
        // State 49
        -70,
        // State 50
        0,
        // State 51
        -98,
        // State 52
        -73,
        // State 53
        -27,
        // State 54
        -82,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        0,
        // State 59
        -74,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        0,
        // State 95
        -92,
        // State 96
        0,
        // State 97
        -23,
        // State 98
        0,
        // State 99
        -21,
        // State 100
        -22,
        // State 101
        -91,
        // State 102
        -93,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        0,
        // State 133
        -89,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        0,
        // State 140
        -90,
        // State 141
        -24,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        0,
        // State 150
        -25,
        // State 151
        0,
        // State 152
        0,
        // State 153
        -26,
        // State 154
        -94,
        // State 155
        0,
        // State 156
        -88,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            4 => 20,
            7 => 42,
            10 => 16,
            13 => 49,
            14 => match state {
                21 => 106,
                _ => 73,
            },
            15 => 74,
            16 => match state {
                22 | 32..=34 => 108,
                _ => 75,
            },
            17 => match state {
                30..=31 => 119,
                _ => 76,
            },
            18 => match state {
                3..=5 | 8 | 10..=12 | 16 | 18 | 24 | 28 | 48 => 60,
                13 | 15 | 20..=22 | 30..=41 | 45 => 77,
                _ => 50,
            },
            19 => 51,
            20 => match state {
                23 => 110,
                43 => 138,
                _ => 78,
            },
            21 => 12,
            22 => match state {
                19 => 29,
                _ => 26,
            },
            23 => 79,
            24 => 61,
            25 => 80,
            26 => match state {
                27 => 115,
                29 => 117,
                _ => 113,
            },
            27 => match state {
                12 => 72,
                _ => 63,
            },
            28 => match state {
                1 | 25 => 59,
                _ => 52,
            },
            30 => match state {
                14 => 25,
                _ => 1,
            },
            31 => match state {
                15 => 93,
                20 => 103,
                21 => 107,
                35 => 126,
                36 => 127,
                37 => 128,
                38 => 129,
                39 => 130,
                40 => 131,
                41 => 134,
                45 => 151,
                _ => 81,
            },
            32 => 82,
            33 => match state {
                32 => 122,
                33 => 123,
                34 => 124,
                _ => 109,
            },
            34 => match state {
                30 => 120,
                31 => 121,
                _ => 83,
            },
            35 => match state {
                6 => 17,
                9 => 19,
                26..=27 | 29 => 114,
                42 => 135,
                _ => 2,
            },
            36 => 139,
            37 => match state {
                3 => 62,
                5 => 65,
                8 => 69,
                10 => 70,
                11 => 71,
                16 => 94,
                18 => 98,
                24 => 111,
                28 => 116,
                48 => 155,
                _ => 64,
            },
            38 => match state {
                44 => 149,
                46 => 152,
                47 => 154,
                _ => 53,
            },
            40 => 46,
            41 => 66,
            42 => 54,
            43 => 67,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###""/""###,
            r###"";""###,
            r###""==""###,
            r###""CX""###,
            r###""OPENQASM 2.0""###,
            r###""U""###,
            r###""[""###,
            r###""]""###,
            r###""^""###,
            r###""barrier""###,
            r###""cos""###,
            r###""creg""###,
            r###""exp""###,
            r###""gate""###,
            r###""if""###,
            r###""include""###,
            r###""ln""###,
            r###""measure""###,
            r###""opaque""###,
            r###""pi""###,
            r###""qreg""###,
            r###""reset""###,
            r###""sin""###,
            r###""sqrt""###,
            r###""tan""###,
            r###""{""###,
            r###""}""###,
            r###"identifier"###,
            r###"integer"###,
            r###"real"###,
            r###"string"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<>
    where 
    {
        file: usize,
        __phantom: core::marker::PhantomData<()>,
    }
    impl<> __state_machine::ParserDefinition for __StateMachine<>
    where 
    {
        type Location = usize;
        type Error = FileSpan;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = Program;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 38 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.file,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: core::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::LParen if true => Some(0),
            Token::RParen if true => Some(1),
            Token::Mul if true => Some(2),
            Token::Add if true => Some(3),
            Token::Comma if true => Some(4),
            Token::Sub if true => Some(5),
            Token::Arrow if true => Some(6),
            Token::Div if true => Some(7),
            Token::Semicolon if true => Some(8),
            Token::Equals if true => Some(9),
            Token::CX if true => Some(10),
            Token::OPENQASM if true => Some(11),
            Token::U if true => Some(12),
            Token::LBracket if true => Some(13),
            Token::RBracket if true => Some(14),
            Token::Pow if true => Some(15),
            Token::Barrier if true => Some(16),
            Token::Cos if true => Some(17),
            Token::CReg if true => Some(18),
            Token::Exp if true => Some(19),
            Token::Gate if true => Some(20),
            Token::If if true => Some(21),
            Token::Include if true => Some(22),
            Token::Ln if true => Some(23),
            Token::Measure if true => Some(24),
            Token::Opaque if true => Some(25),
            Token::Pi if true => Some(26),
            Token::QReg if true => Some(27),
            Token::Reset if true => Some(28),
            Token::Sin if true => Some(29),
            Token::Sqrt if true => Some(30),
            Token::Tan if true => Some(31),
            Token::LBrace if true => Some(32),
            Token::RBrace if true => Some(33),
            Token::Identifier(_) if true => Some(34),
            Token::Integer(_) if true => Some(35),
            Token::Real(_) if true => Some(36),
            Token::String(_) if true => Some(37),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: core::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 => __Symbol::Variant0(__token),
            34 | 37 => match __token {
                Token::Identifier(__tok0) | Token::String(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            35 => match __token {
                Token::Integer(__tok0) if true => __Symbol::Variant2(__tok0),
                _ => unreachable!(),
            },
            36 => match __token {
                Token::Real(__tok0) if true => __Symbol::Variant3(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub(crate) struct IncludedParser {
        _priv: (),
    }

    impl IncludedParser {
        pub(crate) fn new() -> IncludedParser {
            IncludedParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub(crate) fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            file: usize,
            __tokens0: __TOKENS,
        ) -> Result<Program, __lalrpop_util::ParseError<usize, Token, FileSpan>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    file,
                    __phantom: core::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        file: usize,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> Option<Result<Program,__lalrpop_util::ParseError<usize, Token, FileSpan>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            28 => {
                __reduce28(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            29 => {
                __reduce29(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            30 => {
                __reduce30(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            31 => {
                __reduce31(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            97 => {
                // __Included = Included => ActionFn(1);
                let __sym0 = __pop_Variant15(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action1::<>(file, __sym0);
                return Some(Ok(__nt));
            }
            98 => {
                __reduce98(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (Token, Token), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Decl, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Expr, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Program, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Reg, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Decl>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Reg>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Stmt>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Symbol>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<u64>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Stmt, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Symbol, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Token, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Span<Expr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Span<Reg>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Span<Symbol>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Decl>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Expr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Reg>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Stmt>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Symbol>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, core::option::Option<(Token, Token)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, f32, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, u64, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("OPENQASM 2.0" ";") = "OPENQASM 2.0", ";" => ActionFn(64);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action64::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("OPENQASM 2.0" ";")? = "OPENQASM 2.0", ";" => ActionFn(91);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action91::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("OPENQASM 2.0" ";")? =  => ActionFn(63);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action63::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",") = Span<Expr>, "," => ActionFn(84);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action84::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce5<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")* = (<Span<Expr>> ",")+ => ActionFn(83);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")+ = Span<Expr>, "," => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")+ = (<Span<Expr>> ",")+, Span<Expr>, "," => ActionFn(95);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action95::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce8<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",") = Span<Ident>, "," => ActionFn(72);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action72::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")* =  => ActionFn(70);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action70::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")* = (<Span<Ident>> ",")+ => ActionFn(71);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")+ = Span<Ident>, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")+ = (<Span<Ident>> ",")+, Span<Ident>, "," => ActionFn(99);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action99::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",") = Span<Reg>, "," => ActionFn(77);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action77::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")* =  => ActionFn(75);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action75::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")* = (<Span<Reg>> ",")+ => ActionFn(76);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")+ = Span<Reg>, "," => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")+ = (<Span<Reg>> ",")+, Span<Reg>, "," => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(81);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action81::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce19<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "include", Span<String>, ";" => ActionFn(4);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action4::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce21<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "qreg", Span<Reg>, ";" => ActionFn(5);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action5::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce22<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "creg", Span<Reg>, ";" => ActionFn(6);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action6::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "opaque", Span<Ident>, MaybeList<Span<Ident>>, Sep<Span<Ident>, ",">, ";" => ActionFn(7);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action7::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 13)
    }
    pub(crate) fn __reduce24<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "gate", Span<Ident>, MaybeList<Span<Ident>>, Sep<Span<Ident>, ",">, "{", "}" => ActionFn(132);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action132::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 13)
    }
    pub(crate) fn __reduce25<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "gate", Span<Ident>, MaybeList<Span<Ident>>, Sep<Span<Ident>, ",">, "{", Span<Stmt>+, "}" => ActionFn(133);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant24(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action133::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (7, 13)
    }
    pub(crate) fn __reduce26<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = Span<Stmt> => ActionFn(9);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce27<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = Span<Expr>, "+", Span<ExprTerm> => ActionFn(17);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action17::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 14)
    }
    pub(crate) fn __reduce28<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = Span<Expr>, "-", Span<ExprTerm> => ActionFn(18);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action18::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 14)
    }
    pub(crate) fn __reduce29<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = ExprTerm => ActionFn(19);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce30<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "pi" => ActionFn(26);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce31<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = Real => ActionFn(27);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = Int => ActionFn(28);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce33<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = Ident => ActionFn(29);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce34<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "sin", "(", Span<Expr>, ")" => ActionFn(30);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action30::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce35<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "cos", "(", Span<Expr>, ")" => ActionFn(31);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action31::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce36<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "tan", "(", Span<Expr>, ")" => ActionFn(32);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action32::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce37<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "exp", "(", Span<Expr>, ")" => ActionFn(33);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action33::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce38<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "ln", "(", Span<Expr>, ")" => ActionFn(34);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action34::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce39<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "sqrt", "(", Span<Expr>, ")" => ActionFn(35);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action35::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce40<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "(", Expr, ")" => ActionFn(36);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action36::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 15)
    }
    pub(crate) fn __reduce41<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprFactor = "-", Span<ExprFactor> => ActionFn(23);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action23::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce42<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprFactor = Span<ExprAtom>, "^", Span<ExprFactor> => ActionFn(24);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action24::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce43<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprFactor = ExprAtom => ActionFn(25);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce44<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprTerm = Span<ExprTerm>, "*", Span<ExprFactor> => ActionFn(20);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action20::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce45<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprTerm = Span<ExprTerm>, "/", Span<ExprFactor> => ActionFn(21);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action21::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce46<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprTerm = ExprFactor => ActionFn(22);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce47<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Ident = identifier => ActionFn(39);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce48<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included = "OPENQASM 2.0", ";" => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce49<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included = "OPENQASM 2.0", ";", Span<Decl>+ => ActionFn(127);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action127::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce50<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce51<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included = Span<Decl>+ => ActionFn(129);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action129::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce52<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Int = integer => ActionFn(40);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce53<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Expr>> =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 21)
    }
    pub(crate) fn __reduce54<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Expr>> = "(", Sep<Span<Expr>, ",">, ")" => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce55<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Ident>> =  => ActionFn(57);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action57::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 22)
    }
    pub(crate) fn __reduce56<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Ident>> = "(", Sep<Span<Ident>, ",">, ")" => ActionFn(58);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action58::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce57<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Real = real => ActionFn(41);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce58<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Reg = Ident => ActionFn(37);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce59<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Reg = Ident, "[", Int, "]" => ActionFn(38);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action38::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce60<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Expr>, ","> =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce61<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Expr>, ","> = Span<Expr> => ActionFn(96);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce62<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Expr>, ","> = (<Span<Expr>> ",")+, Span<Expr> => ActionFn(97);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action97::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce63<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Ident>, ","> =  => ActionFn(55);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action55::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce64<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Ident>, ","> = Span<Ident> => ActionFn(100);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce65<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Ident>, ","> = (<Span<Ident>> ",")+, Span<Ident> => ActionFn(101);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action101::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce66<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Reg>, ","> =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce67<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Reg>, ","> = Span<Reg> => ActionFn(104);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action104::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce68<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Reg>, ","> = (<Span<Reg>> ",")+, Span<Reg> => ActionFn(105);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action105::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce69<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl> = Decl => ActionFn(116);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action116::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce70<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>* =  => ActionFn(65);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action65::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce71<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>* = Span<Decl>+ => ActionFn(66);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce72<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>+ = Span<Decl> => ActionFn(68);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce73<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>+ = Span<Decl>+, Span<Decl> => ActionFn(69);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action69::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 30)
    }
    pub(crate) fn __reduce74<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Expr> = Expr => ActionFn(117);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce75<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<ExprAtom> = ExprAtom => ActionFn(118);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce76<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<ExprFactor> = ExprFactor => ActionFn(119);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce77<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<ExprTerm> = ExprTerm => ActionFn(120);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce78<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Ident> = Ident => ActionFn(121);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce79<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Int> = Int => ActionFn(122);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action122::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce80<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Reg> = Reg => ActionFn(123);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action123::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce81<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt> = Stmt => ActionFn(124);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action124::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce82<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>* =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 39)
    }
    pub(crate) fn __reduce83<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>* = Span<Stmt>+ => ActionFn(53);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce84<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>+ = Span<Stmt> => ActionFn(73);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce85<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>+ = Span<Stmt>+, Span<Stmt> => ActionFn(74);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action74::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce86<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<String> = String => ActionFn(125);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action125::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce87<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "U", "(", Span<Expr>, ",", Span<Expr>, ",", Span<Expr>, ")", Span<Reg>, ";" => ActionFn(10);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant10(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant6(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action10::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (10, 42)
    }
    pub(crate) fn __reduce88<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "CX", Span<Reg>, ",", Span<Reg>, ";" => ActionFn(11);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action11::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 42)
    }
    pub(crate) fn __reduce89<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "measure", Span<Reg>, "->", Span<Reg>, ";" => ActionFn(12);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action12::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 42)
    }
    pub(crate) fn __reduce90<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "reset", Span<Reg>, ";" => ActionFn(13);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action13::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 42)
    }
    pub(crate) fn __reduce91<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "barrier", Sep<Span<Reg>, ",">, ";" => ActionFn(14);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action14::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 42)
    }
    pub(crate) fn __reduce92<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = Span<Ident>, MaybeList<Span<Expr>>, Sep<Span<Reg>, ",">, ";" => ActionFn(15);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action15::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 42)
    }
    pub(crate) fn __reduce93<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "if", "(", Span<Reg>, "==", Span<Int>, ")", Span<Stmt> => ActionFn(16);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant23(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant22(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action16::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (7, 42)
    }
    pub(crate) fn __reduce94<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // String = string => ActionFn(42);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce95<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TopLevel = "OPENQASM 2.0", ";" => ActionFn(130);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action130::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce96<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TopLevel = "OPENQASM 2.0", ";", Span<Decl>+ => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce98<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __TopLevel = TopLevel => ActionFn(0);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action0::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 46)
    }
}
pub(crate) use self::__parse__Included::IncludedParser;

#[cfg_attr(rustfmt, rustfmt_skip)]
mod __parse__TopLevel {
    #![allow(non_snake_case, non_camel_case_types, unused_mut, unused_variables, unused_imports, unused_parens, clippy::all)]

    use crate::ast::{Program, Decl, Stmt, Expr, Reg, Span, FileSpan, Symbol};
    use super::super::Token;
    #[allow(unused_extern_crates)]
    extern crate lalrpop_util as __lalrpop_util;
    #[allow(unused_imports)]
    use self::__lalrpop_util::state_machine as __state_machine;
    extern crate core;
    extern crate alloc;
    use super::__ToTriple;
    #[allow(dead_code)]
    pub(crate) enum __Symbol<>
     {
        Variant0(Token),
        Variant1(Symbol),
        Variant2(u64),
        Variant3(f32),
        Variant4((Token, Token)),
        Variant5(core::option::Option<(Token, Token)>),
        Variant6(Span<Expr>),
        Variant7(alloc::vec::Vec<Span<Expr>>),
        Variant8(Span<Symbol>),
        Variant9(alloc::vec::Vec<Span<Symbol>>),
        Variant10(Span<Reg>),
        Variant11(alloc::vec::Vec<Span<Reg>>),
        Variant12(usize),
        Variant13(Decl),
        Variant14(Expr),
        Variant15(Program),
        Variant16(Vec<Span<Expr>>),
        Variant17(Vec<Span<Symbol>>),
        Variant18(Reg),
        Variant19(Vec<Span<Reg>>),
        Variant20(Span<Decl>),
        Variant21(alloc::vec::Vec<Span<Decl>>),
        Variant22(Span<u64>),
        Variant23(Span<Stmt>),
        Variant24(alloc::vec::Vec<Span<Stmt>>),
        Variant25(Stmt),
    }
    const __ACTION: &[i16] = &[
        // State 0
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 1
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 6, 0, 7, 0, 8, 57, 9, 0, 10, 11, 0, 12, 13, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 2
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 6, 0, 7, 0, 8, 57, 9, 0, 10, 11, 0, 12, 13, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 3
        15, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -54, 0, 0, 0,
        // State 4
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 5
        0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 6
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 7
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 8
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        // State 9
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 10
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 11
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 12
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 13
        0, 0, 0, 0, 0, 0, 0, 0, -67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 14
        22, -61, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 15
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 16
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 17
        27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, -56, 0, 0, 0,
        // State 18
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 19
        27, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -56, 0, 0, 0,
        // State 20
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 21
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 22
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 23
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
        // State 24
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 25
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 58, 0, 0, 0,
        // State 26
        0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 27
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 28
        0, 0, 0, 0, 0, 0, 0, 0, -64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 29
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 30
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 31
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 32
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 33
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 34
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 35
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 36
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 37
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 38
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 39
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 40
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 41
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 42
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91, 0, 0,
        // State 43
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 6, 0, 0, 0, 0, 57, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 0, 150, 58, 0, 0, 0,
        // State 44
        22, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 0, 85, 0, 0, 0, 86, 0, 0, 87, 0, 0, 88, 89, 90, 0, 0, 58, 91, 92, 0,
        // State 45
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 6, 0, 0, 0, 0, 57, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 0, 153, 58, 0, 0, 0,
        // State 46
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 56, 0, 0, 0, 6, 0, 0, 0, 0, 57, 0, 0, 10, 0, 0, 0, 13, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 47
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58, 0, 0, 0,
        // State 48
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 49
        0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 50
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -70, 0, -70, 0, 0, 0, -70, 0, -70, 0, -70, -70, -70, 0, -70, -70, 0, -70, -70, 0, 0, 0, 0, 0, -70, 0, 0, 0,
        // State 51
        -79, -79, 0, 0, -79, 0, 0, 0, -79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -79, 0, -79, 0, 0, 0,
        // State 52
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -73, 0, -73, 0, 0, 0, -73, 0, -73, 0, -73, -73, -73, 0, -73, -73, 0, -73, -73, 0, 0, 0, 0, 0, -73, 0, 0, 0,
        // State 53
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -27, 0, -27, 0, 0, 0, -27, 0, -27, 0, -27, -27, -27, 0, -27, -27, 0, -27, -27, 0, 0, 0, 0, 0, -27, 0, 0, 0,
        // State 54
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -82, 0, -82, 0, 0, 0, -82, 0, -82, 0, -82, -82, -82, 0, -82, -82, 0, -82, -82, 0, 0, 0, 0, -82, -82, 0, 0, 0,
        // State 55
        16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 56
        19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 57
        -48, -48, -48, -48, -48, -48, -48, -48, -48, -48, 0, 0, 0, -48, 0, -48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -48, 0, -48, 0, 0, 0,
        // State 58
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -74, 0, -74, 0, 0, 0, -74, 0, -74, 0, -74, -74, -74, 0, -74, -74, 0, -74, -74, 0, 0, 0, 0, 0, -74, 0, 0, 0,
        // State 59
        0, 0, 0, 0, -59, 0, -59, 0, -59, -59, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 60
        0, 0, 0, 0, -81, 0, -81, 0, -81, -81, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 61
        0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 62
        0, 0, 0, 0, 0, 0, 0, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 63
        0, 0, 0, 0, 96, 0, 0, 0, -68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 64
        0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 65
        0, 0, 0, 0, 0, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 66
        0, 0, 0, 0, 0, 0, 0, 0, -87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 67
        0, 0, 0, 0, 0, 0, 0, 0, -95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 68
        0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 69
        0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 70
        0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 71
        0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 72
        0, -75, 0, -75, -75, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 73
        0, -44, -44, -44, -44, -44, 0, -44, 0, 0, 0, 0, 0, 0, 0, -76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 74
        0, -47, -47, -47, -47, -47, 0, -47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 75
        0, -30, -78, -30, -30, -30, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 76
        0, -34, -34, -34, -34, -34, 0, -34, 0, 0, 0, 0, 0, 0, 0, -34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 77
        0, -33, -33, -33, -33, -33, 0, -33, 0, 0, 0, 0, 0, 0, 0, -33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 78
        0, -32, -32, -32, -32, -32, 0, -32, 0, 0, 0, 0, 0, 0, 0, -32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 79
        0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 80
        0, -62, 0, 30, 105, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 81
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 82
        0, 0, 33, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 83
        35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 84
        36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 85
        37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 86
        0, -31, -31, -31, -31, -31, 0, -31, 0, 0, 0, 0, 0, 0, 0, -31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 87
        38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 88
        39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 89
        40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 90
        0, -53, -53, -53, -53, -53, 0, -53, 0, 0, 0, 0, 0, 0, -53, -53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 91
        0, -58, -58, -58, -58, -58, 0, -58, 0, 0, 0, 0, 0, 0, 0, -58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 92
        0, 0, 0, 30, 41, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 93
        0, 0, 0, 0, 112, 0, 0, 0, -69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 94
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -92, 0, -92, 0, 0, 0, -92, 0, -92, 0, -92, -92, -92, 0, -92, -92, 0, -92, -92, 0, 0, 0, 0, -92, -92, 0, 0, 0,
        // State 95
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -17, 0, 0, 0,
        // State 96
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -23, 0, -23, 0, 0, 0, -23, 0, -23, 0, -23, -23, -23, 0, -23, -23, 0, -23, -23, 0, 0, 0, 0, 0, -23, 0, 0, 0,
        // State 97
        0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 98
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -21, 0, -21, 0, 0, 0, -21, 0, -21, 0, -21, -21, -21, 0, -21, -21, 0, -21, -21, 0, 0, 0, 0, 0, -21, 0, 0, 0,
        // State 99
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -22, 0, -22, 0, 0, 0, -22, 0, -22, 0, -22, -22, -22, 0, -22, -22, 0, -22, -22, 0, 0, 0, 0, 0, -22, 0, 0, 0,
        // State 100
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -91, 0, -91, 0, 0, 0, -91, 0, -91, 0, -91, -91, -91, 0, -91, -91, 0, -91, -91, 0, 0, 0, 0, -91, -91, 0, 0, 0,
        // State 101
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -93, 0, -93, 0, 0, 0, -93, 0, -93, 0, -93, -93, -93, 0, -93, -93, 0, -93, -93, 0, 0, 0, 0, -93, -93, 0, 0, 0,
        // State 102
        0, -63, 0, 30, 118, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 103
        0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -55, 0, 0, 0,
        // State 104
        -7, 0, 0, 0, 0, -7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7, 0, -7, 0, 0, 0, -7, 0, 0, -7, 0, 0, -7, -7, -7, 0, 0, -7, -7, -7, 0,
        // State 105
        0, 125, 0, -75, 0, -75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 106
        0, 0, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 107
        0, -77, -77, -77, -77, -77, 0, -77, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 108
        0, -42, -42, -42, -42, -42, 0, -42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 109
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 110
        0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 111
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -18, 0, 0, 0,
        // State 112
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0,
        // State 113
        0, -65, 0, 0, 136, 0, 0, 0, -65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -65, 0, 0, 0, 0, 0,
        // State 114
        0, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 115
        0, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 116
        0, 0, 0, 0, 0, 0, 0, 0, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 117
        -8, 0, 0, 0, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -8, 0, -8, 0, 0, 0, -8, 0, 0, -8, 0, 0, -8, -8, -8, 0, 0, -8, -8, -8, 0,
        // State 118
        0, -78, -78, -78, -78, -78, 0, -78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 119
        0, -28, 33, -28, -28, -28, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 120
        0, -29, 33, -29, -29, -29, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 121
        0, -43, -43, -43, -43, -43, 0, -43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 122
        0, -45, -45, -45, -45, -45, 0, -45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 123
        0, -46, -46, -46, -46, -46, 0, -46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 124
        0, -41, -41, -41, -41, -41, 0, -41, 0, 0, 0, 0, 0, 0, 0, -41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 125
        0, 142, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 126
        0, 143, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 127
        0, 144, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 128
        0, 145, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 129
        0, 146, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 130
        0, 147, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 131
        0, 0, 0, 0, -60, 0, -60, 0, -60, -60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 132
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -89, 0, -89, 0, 0, 0, -89, 0, -89, 0, -89, -89, -89, 0, -89, -89, 0, -89, -89, 0, 0, 0, 0, -89, -89, 0, 0, 0,
        // State 133
        0, 0, 0, 30, 45, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 134
        0, -66, 0, 0, 148, 0, 0, 0, -66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -66, 0, 0, 0, 0, 0,
        // State 135
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12, 0, 0, 0,
        // State 136
        0, 0, 0, 0, 0, 0, 0, 0, -57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57, 0, -57, 0, 0, 0,
        // State 137
        0, -80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 138
        0, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 139
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -90, 0, -90, 0, 0, 0, -90, 0, -90, 0, -90, -90, -90, 0, -90, -90, 0, -90, -90, 0, 0, 0, 0, -90, -90, 0, 0, 0,
        // State 140
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, 0, -24, 0, 0, 0, -24, 0, -24, 0, -24, -24, -24, 0, -24, -24, 0, -24, -24, 0, 0, 0, 0, 0, -24, 0, 0, 0,
        // State 141
        0, -36, -36, -36, -36, -36, 0, -36, 0, 0, 0, 0, 0, 0, 0, -36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 142
        0, -38, -38, -38, -38, -38, 0, -38, 0, 0, 0, 0, 0, 0, 0, -38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 143
        0, -39, -39, -39, -39, -39, 0, -39, 0, 0, 0, 0, 0, 0, 0, -39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 144
        0, -35, -35, -35, -35, -35, 0, -35, 0, 0, 0, 0, 0, 0, 0, -35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 145
        0, -40, -40, -40, -40, -40, 0, -40, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 146
        0, -37, -37, -37, -37, -37, 0, -37, 0, 0, 0, 0, 0, 0, 0, -37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 147
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -13, 0, 0, 0,
        // State 148
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -85, 0, -85, 0, 0, 0, -85, 0, 0, 0, 0, -85, 0, 0, -85, 0, 0, 0, -85, 0, 0, 0, 0, -85, -85, 0, 0, 0,
        // State 149
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -25, 0, -25, 0, 0, 0, -25, 0, -25, 0, -25, -25, -25, 0, -25, -25, 0, -25, -25, 0, 0, 0, 0, 0, -25, 0, 0, 0,
        // State 150
        0, 48, 0, 30, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 151
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86, 0, -86, 0, 0, 0, -86, 0, 0, 0, 0, -86, 0, 0, -86, 0, 0, 0, -86, 0, 0, 0, 0, -86, -86, 0, 0, 0,
        // State 152
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -26, 0, -26, 0, 0, 0, -26, 0, -26, 0, -26, -26, -26, 0, -26, -26, 0, -26, -26, 0, 0, 0, 0, 0, -26, 0, 0, 0,
        // State 153
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -94, 0, -94, 0, 0, 0, -94, 0, -94, 0, -94, -94, -94, 0, -94, -94, 0, -94, -94, 0, 0, 0, 0, -94, -94, 0, 0, 0,
        // State 154
        0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        // State 155
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -88, 0, -88, 0, 0, 0, -88, 0, -88, 0, -88, -88, -88, 0, -88, -88, 0, -88, -88, 0, 0, 0, 0, -88, -88, 0, 0, 0,
    ];
    fn __action(state: i16, integer: usize) -> i16 {
        __ACTION[(state as usize) * 38 + integer]
    }
    const __EOF_ACTION: &[i16] = &[
        // State 0
        0,
        // State 1
        -96,
        // State 2
        -97,
        // State 3
        0,
        // State 4
        0,
        // State 5
        0,
        // State 6
        0,
        // State 7
        0,
        // State 8
        0,
        // State 9
        0,
        // State 10
        0,
        // State 11
        0,
        // State 12
        0,
        // State 13
        0,
        // State 14
        0,
        // State 15
        0,
        // State 16
        0,
        // State 17
        0,
        // State 18
        0,
        // State 19
        0,
        // State 20
        0,
        // State 21
        0,
        // State 22
        0,
        // State 23
        0,
        // State 24
        0,
        // State 25
        0,
        // State 26
        0,
        // State 27
        0,
        // State 28
        0,
        // State 29
        0,
        // State 30
        0,
        // State 31
        0,
        // State 32
        0,
        // State 33
        0,
        // State 34
        0,
        // State 35
        0,
        // State 36
        0,
        // State 37
        0,
        // State 38
        0,
        // State 39
        0,
        // State 40
        0,
        // State 41
        0,
        // State 42
        0,
        // State 43
        0,
        // State 44
        0,
        // State 45
        0,
        // State 46
        0,
        // State 47
        0,
        // State 48
        -99,
        // State 49
        0,
        // State 50
        -70,
        // State 51
        0,
        // State 52
        -73,
        // State 53
        -27,
        // State 54
        -82,
        // State 55
        0,
        // State 56
        0,
        // State 57
        0,
        // State 58
        -74,
        // State 59
        0,
        // State 60
        0,
        // State 61
        0,
        // State 62
        0,
        // State 63
        0,
        // State 64
        0,
        // State 65
        0,
        // State 66
        0,
        // State 67
        0,
        // State 68
        0,
        // State 69
        0,
        // State 70
        0,
        // State 71
        0,
        // State 72
        0,
        // State 73
        0,
        // State 74
        0,
        // State 75
        0,
        // State 76
        0,
        // State 77
        0,
        // State 78
        0,
        // State 79
        0,
        // State 80
        0,
        // State 81
        0,
        // State 82
        0,
        // State 83
        0,
        // State 84
        0,
        // State 85
        0,
        // State 86
        0,
        // State 87
        0,
        // State 88
        0,
        // State 89
        0,
        // State 90
        0,
        // State 91
        0,
        // State 92
        0,
        // State 93
        0,
        // State 94
        -92,
        // State 95
        0,
        // State 96
        -23,
        // State 97
        0,
        // State 98
        -21,
        // State 99
        -22,
        // State 100
        -91,
        // State 101
        -93,
        // State 102
        0,
        // State 103
        0,
        // State 104
        0,
        // State 105
        0,
        // State 106
        0,
        // State 107
        0,
        // State 108
        0,
        // State 109
        0,
        // State 110
        0,
        // State 111
        0,
        // State 112
        0,
        // State 113
        0,
        // State 114
        0,
        // State 115
        0,
        // State 116
        0,
        // State 117
        0,
        // State 118
        0,
        // State 119
        0,
        // State 120
        0,
        // State 121
        0,
        // State 122
        0,
        // State 123
        0,
        // State 124
        0,
        // State 125
        0,
        // State 126
        0,
        // State 127
        0,
        // State 128
        0,
        // State 129
        0,
        // State 130
        0,
        // State 131
        0,
        // State 132
        -89,
        // State 133
        0,
        // State 134
        0,
        // State 135
        0,
        // State 136
        0,
        // State 137
        0,
        // State 138
        0,
        // State 139
        -90,
        // State 140
        -24,
        // State 141
        0,
        // State 142
        0,
        // State 143
        0,
        // State 144
        0,
        // State 145
        0,
        // State 146
        0,
        // State 147
        0,
        // State 148
        0,
        // State 149
        -25,
        // State 150
        0,
        // State 151
        0,
        // State 152
        -26,
        // State 153
        -94,
        // State 154
        0,
        // State 155
        -88,
    ];
    fn __goto(state: i16, nt: usize) -> i16 {
        match nt {
            4 => 20,
            7 => 41,
            10 => 16,
            13 => 50,
            14 => match state {
                21 => 105,
                _ => 72,
            },
            15 => 73,
            16 => match state {
                22 | 31..=33 => 107,
                _ => 74,
            },
            17 => match state {
                29..=30 => 118,
                _ => 75,
            },
            18 => match state {
                4..=6 | 9 | 11..=13 | 16 | 18 | 24 | 27 | 47 => 59,
                14..=15 | 20..=22 | 29..=40 | 44 => 76,
                _ => 51,
            },
            20 => match state {
                23 => 109,
                42 => 137,
                _ => 77,
            },
            21 => 13,
            22 => match state {
                19 => 28,
                _ => 25,
            },
            23 => 78,
            24 => 60,
            25 => 79,
            26 => match state {
                26 => 114,
                28 => 116,
                _ => 112,
            },
            27 => match state {
                13 => 71,
                _ => 62,
            },
            28 => match state {
                2 => 58,
                _ => 52,
            },
            30 => 2,
            31 => match state {
                15 => 92,
                20 => 102,
                21 => 106,
                34 => 125,
                35 => 126,
                36 => 127,
                37 => 128,
                38 => 129,
                39 => 130,
                40 => 133,
                44 => 150,
                _ => 80,
            },
            32 => 81,
            33 => match state {
                31 => 121,
                32 => 122,
                33 => 123,
                _ => 108,
            },
            34 => match state {
                29 => 119,
                30 => 120,
                _ => 82,
            },
            35 => match state {
                7 => 17,
                10 => 19,
                25..=26 | 28 => 113,
                41 => 134,
                _ => 3,
            },
            36 => 138,
            37 => match state {
                4 => 61,
                6 => 64,
                9 => 68,
                11 => 69,
                12 => 70,
                16 => 93,
                18 => 97,
                24 => 110,
                27 => 115,
                47 => 154,
                _ => 63,
            },
            38 => match state {
                43 => 148,
                45 => 151,
                46 => 153,
                _ => 53,
            },
            40 => 45,
            41 => 65,
            42 => 54,
            43 => 66,
            44 => 48,
            _ => 0,
        }
    }
    fn __expected_tokens(__state: i16) -> alloc::vec::Vec<alloc::string::String> {
        const __TERMINAL: &[&str] = &[
            r###""(""###,
            r###"")""###,
            r###""*""###,
            r###""+""###,
            r###"",""###,
            r###""-""###,
            r###""->""###,
            r###""/""###,
            r###"";""###,
            r###""==""###,
            r###""CX""###,
            r###""OPENQASM 2.0""###,
            r###""U""###,
            r###""[""###,
            r###""]""###,
            r###""^""###,
            r###""barrier""###,
            r###""cos""###,
            r###""creg""###,
            r###""exp""###,
            r###""gate""###,
            r###""if""###,
            r###""include""###,
            r###""ln""###,
            r###""measure""###,
            r###""opaque""###,
            r###""pi""###,
            r###""qreg""###,
            r###""reset""###,
            r###""sin""###,
            r###""sqrt""###,
            r###""tan""###,
            r###""{""###,
            r###""}""###,
            r###"identifier"###,
            r###"integer"###,
            r###"real"###,
            r###"string"###,
        ];
        __TERMINAL.iter().enumerate().filter_map(|(index, terminal)| {
            let next_state = __action(__state, index);
            if next_state == 0 {
                None
            } else {
                Some(alloc::string::ToString::to_string(terminal))
            }
        }).collect()
    }
    pub(crate) struct __StateMachine<>
    where 
    {
        file: usize,
        __phantom: core::marker::PhantomData<()>,
    }
    impl<> __state_machine::ParserDefinition for __StateMachine<>
    where 
    {
        type Location = usize;
        type Error = FileSpan;
        type Token = Token;
        type TokenIndex = usize;
        type Symbol = __Symbol<>;
        type Success = Program;
        type StateIndex = i16;
        type Action = i16;
        type ReduceIndex = i16;
        type NonterminalIndex = usize;

        #[inline]
        fn start_location(&self) -> Self::Location {
              Default::default()
        }

        #[inline]
        fn start_state(&self) -> Self::StateIndex {
              0
        }

        #[inline]
        fn token_to_index(&self, token: &Self::Token) -> Option<usize> {
            __token_to_integer(token, core::marker::PhantomData::<()>)
        }

        #[inline]
        fn action(&self, state: i16, integer: usize) -> i16 {
            __action(state, integer)
        }

        #[inline]
        fn error_action(&self, state: i16) -> i16 {
            __action(state, 38 - 1)
        }

        #[inline]
        fn eof_action(&self, state: i16) -> i16 {
            __EOF_ACTION[state as usize]
        }

        #[inline]
        fn goto(&self, state: i16, nt: usize) -> i16 {
            __goto(state, nt)
        }

        fn token_to_symbol(&self, token_index: usize, token: Self::Token) -> Self::Symbol {
            __token_to_symbol(token_index, token, core::marker::PhantomData::<()>)
        }

        fn expected_tokens(&self, state: i16) -> alloc::vec::Vec<alloc::string::String> {
            __expected_tokens(state)
        }

        #[inline]
        fn uses_error_recovery(&self) -> bool {
            false
        }

        #[inline]
        fn error_recovery_symbol(
            &self,
            recovery: __state_machine::ErrorRecovery<Self>,
        ) -> Self::Symbol {
            panic!("error recovery not enabled for this grammar")
        }

        fn reduce(
            &mut self,
            action: i16,
            start_location: Option<&Self::Location>,
            states: &mut alloc::vec::Vec<i16>,
            symbols: &mut alloc::vec::Vec<__state_machine::SymbolTriple<Self>>,
        ) -> Option<__state_machine::ParseResult<Self>> {
            __reduce(
                self.file,
                action,
                start_location,
                states,
                symbols,
                core::marker::PhantomData::<()>,
            )
        }

        fn simulate_reduce(&self, action: i16) -> __state_machine::SimulatedReduce<Self> {
            panic!("error recovery not enabled for this grammar")
        }
    }
    fn __token_to_integer<
    >(
        __token: &Token,
        _: core::marker::PhantomData<()>,
    ) -> Option<usize>
    {
        match *__token {
            Token::LParen if true => Some(0),
            Token::RParen if true => Some(1),
            Token::Mul if true => Some(2),
            Token::Add if true => Some(3),
            Token::Comma if true => Some(4),
            Token::Sub if true => Some(5),
            Token::Arrow if true => Some(6),
            Token::Div if true => Some(7),
            Token::Semicolon if true => Some(8),
            Token::Equals if true => Some(9),
            Token::CX if true => Some(10),
            Token::OPENQASM if true => Some(11),
            Token::U if true => Some(12),
            Token::LBracket if true => Some(13),
            Token::RBracket if true => Some(14),
            Token::Pow if true => Some(15),
            Token::Barrier if true => Some(16),
            Token::Cos if true => Some(17),
            Token::CReg if true => Some(18),
            Token::Exp if true => Some(19),
            Token::Gate if true => Some(20),
            Token::If if true => Some(21),
            Token::Include if true => Some(22),
            Token::Ln if true => Some(23),
            Token::Measure if true => Some(24),
            Token::Opaque if true => Some(25),
            Token::Pi if true => Some(26),
            Token::QReg if true => Some(27),
            Token::Reset if true => Some(28),
            Token::Sin if true => Some(29),
            Token::Sqrt if true => Some(30),
            Token::Tan if true => Some(31),
            Token::LBrace if true => Some(32),
            Token::RBrace if true => Some(33),
            Token::Identifier(_) if true => Some(34),
            Token::Integer(_) if true => Some(35),
            Token::Real(_) if true => Some(36),
            Token::String(_) if true => Some(37),
            _ => None,
        }
    }
    fn __token_to_symbol<
    >(
        __token_index: usize,
        __token: Token,
        _: core::marker::PhantomData<()>,
    ) -> __Symbol<>
    {
        match __token_index {
            0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 33 => __Symbol::Variant0(__token),
            34 | 37 => match __token {
                Token::Identifier(__tok0) | Token::String(__tok0) if true => __Symbol::Variant1(__tok0),
                _ => unreachable!(),
            },
            35 => match __token {
                Token::Integer(__tok0) if true => __Symbol::Variant2(__tok0),
                _ => unreachable!(),
            },
            36 => match __token {
                Token::Real(__tok0) if true => __Symbol::Variant3(__tok0),
                _ => unreachable!(),
            },
            _ => unreachable!(),
        }
    }
    pub(crate) struct TopLevelParser {
        _priv: (),
    }

    impl TopLevelParser {
        pub(crate) fn new() -> TopLevelParser {
            TopLevelParser {
                _priv: (),
            }
        }

        #[allow(dead_code)]
        pub(crate) fn parse<
            __TOKEN: __ToTriple<>,
            __TOKENS: IntoIterator<Item=__TOKEN>,
        >(
            &self,
            file: usize,
            __tokens0: __TOKENS,
        ) -> Result<Program, __lalrpop_util::ParseError<usize, Token, FileSpan>>
        {
            let __tokens = __tokens0.into_iter();
            let mut __tokens = __tokens.map(|t| __ToTriple::to_triple(t));
            __state_machine::Parser::drive(
                __StateMachine {
                    file,
                    __phantom: core::marker::PhantomData::<()>,
                },
                __tokens,
            )
        }
    }
    pub(crate) fn __reduce<
    >(
        file: usize,
        __action: i16,
        __lookahead_start: Option<&usize>,
        __states: &mut alloc::vec::Vec<i16>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> Option<Result<Program,__lalrpop_util::ParseError<usize, Token, FileSpan>>>
    {
        let (__pop_states, __nonterminal) = match __action {
            0 => {
                __reduce0(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            1 => {
                __reduce1(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            2 => {
                __reduce2(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            3 => {
                __reduce3(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            4 => {
                __reduce4(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            5 => {
                __reduce5(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            6 => {
                __reduce6(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            7 => {
                __reduce7(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            8 => {
                __reduce8(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            9 => {
                __reduce9(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            10 => {
                __reduce10(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            11 => {
                __reduce11(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            12 => {
                __reduce12(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            13 => {
                __reduce13(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            14 => {
                __reduce14(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            15 => {
                __reduce15(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            16 => {
                __reduce16(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            17 => {
                __reduce17(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            18 => {
                __reduce18(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            19 => {
                __reduce19(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            20 => {
                __reduce20(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            21 => {
                __reduce21(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            22 => {
                __reduce22(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            23 => {
                __reduce23(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            24 => {
                __reduce24(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            25 => {
                __reduce25(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            26 => {
                __reduce26(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            27 => {
                __reduce27(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            28 => {
                __reduce28(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            29 => {
                __reduce29(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            30 => {
                __reduce30(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            31 => {
                __reduce31(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            32 => {
                __reduce32(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            33 => {
                __reduce33(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            34 => {
                __reduce34(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            35 => {
                __reduce35(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            36 => {
                __reduce36(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            37 => {
                __reduce37(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            38 => {
                __reduce38(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            39 => {
                __reduce39(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            40 => {
                __reduce40(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            41 => {
                __reduce41(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            42 => {
                __reduce42(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            43 => {
                __reduce43(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            44 => {
                __reduce44(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            45 => {
                __reduce45(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            46 => {
                __reduce46(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            47 => {
                __reduce47(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            48 => {
                __reduce48(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            49 => {
                __reduce49(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            50 => {
                __reduce50(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            51 => {
                __reduce51(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            52 => {
                __reduce52(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            53 => {
                __reduce53(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            54 => {
                __reduce54(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            55 => {
                __reduce55(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            56 => {
                __reduce56(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            57 => {
                __reduce57(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            58 => {
                __reduce58(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            59 => {
                __reduce59(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            60 => {
                __reduce60(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            61 => {
                __reduce61(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            62 => {
                __reduce62(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            63 => {
                __reduce63(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            64 => {
                __reduce64(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            65 => {
                __reduce65(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            66 => {
                __reduce66(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            67 => {
                __reduce67(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            68 => {
                __reduce68(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            69 => {
                __reduce69(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            70 => {
                __reduce70(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            71 => {
                __reduce71(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            72 => {
                __reduce72(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            73 => {
                __reduce73(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            74 => {
                __reduce74(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            75 => {
                __reduce75(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            76 => {
                __reduce76(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            77 => {
                __reduce77(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            78 => {
                __reduce78(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            79 => {
                __reduce79(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            80 => {
                __reduce80(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            81 => {
                __reduce81(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            82 => {
                __reduce82(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            83 => {
                __reduce83(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            84 => {
                __reduce84(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            85 => {
                __reduce85(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            86 => {
                __reduce86(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            87 => {
                __reduce87(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            88 => {
                __reduce88(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            89 => {
                __reduce89(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            90 => {
                __reduce90(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            91 => {
                __reduce91(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            92 => {
                __reduce92(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            93 => {
                __reduce93(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            94 => {
                __reduce94(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            95 => {
                __reduce95(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            96 => {
                __reduce96(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            97 => {
                __reduce97(file, __lookahead_start, __symbols, core::marker::PhantomData::<()>)
            }
            98 => {
                // __TopLevel = TopLevel => ActionFn(0);
                let __sym0 = __pop_Variant15(__symbols);
                let __start = __sym0.0.clone();
                let __end = __sym0.2.clone();
                let __nt = super::__action0::<>(file, __sym0);
                return Some(Ok(__nt));
            }
            _ => panic!("invalid action code {}", __action)
        };
        let __states_len = __states.len();
        __states.truncate(__states_len - __pop_states);
        let __state = *__states.last().unwrap();
        let __next_state = __goto(__state, __nonterminal);
        __states.push(__next_state);
        None
    }
    #[inline(never)]
    fn __symbol_type_mismatch() -> ! {
        panic!("symbol type mismatch")
    }
    fn __pop_Variant4<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, (Token, Token), usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant4(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant13<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Decl, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant13(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant14<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Expr, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant14(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant15<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Program, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant15(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant18<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Reg, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant18(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant20<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Decl>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant20(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant6<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Expr>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant6(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant10<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Reg>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant10(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant23<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Stmt>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant23(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant8<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<Symbol>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant8(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant22<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Span<u64>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant22(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant25<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Stmt, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant25(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant1<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Symbol, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant1(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant0<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Token, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant0(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant16<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Span<Expr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant16(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant19<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Span<Reg>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant19(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant17<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, Vec<Span<Symbol>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant17(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant21<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Decl>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant21(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant7<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Expr>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant7(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant11<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Reg>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant11(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant24<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Stmt>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant24(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant9<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, alloc::vec::Vec<Span<Symbol>>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant9(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant5<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, core::option::Option<(Token, Token)>, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant5(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant3<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, f32, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant3(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant2<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, u64, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant2(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    fn __pop_Variant12<
    >(
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>
    ) -> (usize, usize, usize)
     {
        match __symbols.pop() {
            Some((__l, __Symbol::Variant12(__v), __r)) => (__l, __v, __r),
            _ => __symbol_type_mismatch()
        }
    }
    pub(crate) fn __reduce0<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("OPENQASM 2.0" ";") = "OPENQASM 2.0", ";" => ActionFn(64);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action64::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant4(__nt), __end));
        (2, 0)
    }
    pub(crate) fn __reduce1<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("OPENQASM 2.0" ";")? = "OPENQASM 2.0", ";" => ActionFn(91);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action91::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (2, 1)
    }
    pub(crate) fn __reduce2<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ("OPENQASM 2.0" ";")? =  => ActionFn(63);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action63::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant5(__nt), __end));
        (0, 1)
    }
    pub(crate) fn __reduce3<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",") = Span<Expr>, "," => ActionFn(84);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action84::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (2, 2)
    }
    pub(crate) fn __reduce4<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")* =  => ActionFn(82);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action82::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (0, 3)
    }
    pub(crate) fn __reduce5<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")* = (<Span<Expr>> ",")+ => ActionFn(83);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action83::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (1, 3)
    }
    pub(crate) fn __reduce6<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")+ = Span<Expr>, "," => ActionFn(94);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action94::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (2, 4)
    }
    pub(crate) fn __reduce7<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Expr>> ",")+ = (<Span<Expr>> ",")+, Span<Expr>, "," => ActionFn(95);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action95::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant7(__nt), __end));
        (3, 4)
    }
    pub(crate) fn __reduce8<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",") = Span<Ident>, "," => ActionFn(72);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action72::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (2, 5)
    }
    pub(crate) fn __reduce9<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")* =  => ActionFn(70);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action70::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (0, 6)
    }
    pub(crate) fn __reduce10<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")* = (<Span<Ident>> ",")+ => ActionFn(71);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action71::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (1, 6)
    }
    pub(crate) fn __reduce11<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")+ = Span<Ident>, "," => ActionFn(98);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action98::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (2, 7)
    }
    pub(crate) fn __reduce12<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Ident>> ",")+ = (<Span<Ident>> ",")+, Span<Ident>, "," => ActionFn(99);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action99::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant9(__nt), __end));
        (3, 7)
    }
    pub(crate) fn __reduce13<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",") = Span<Reg>, "," => ActionFn(77);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action77::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (2, 8)
    }
    pub(crate) fn __reduce14<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")* =  => ActionFn(75);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action75::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (0, 9)
    }
    pub(crate) fn __reduce15<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")* = (<Span<Reg>> ",")+ => ActionFn(76);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action76::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (1, 9)
    }
    pub(crate) fn __reduce16<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")+ = Span<Reg>, "," => ActionFn(102);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action102::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (2, 10)
    }
    pub(crate) fn __reduce17<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // (<Span<Reg>> ",")+ = (<Span<Reg>> ",")+, Span<Reg>, "," => ActionFn(103);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action103::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant11(__nt), __end));
        (3, 10)
    }
    pub(crate) fn __reduce18<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // @L =  => ActionFn(81);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action81::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 11)
    }
    pub(crate) fn __reduce19<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // @R =  => ActionFn(80);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action80::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant12(__nt), __end));
        (0, 12)
    }
    pub(crate) fn __reduce20<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "include", Span<String>, ";" => ActionFn(4);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action4::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce21<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "qreg", Span<Reg>, ";" => ActionFn(5);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action5::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce22<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "creg", Span<Reg>, ";" => ActionFn(6);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action6::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (3, 13)
    }
    pub(crate) fn __reduce23<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "opaque", Span<Ident>, MaybeList<Span<Ident>>, Sep<Span<Ident>, ",">, ";" => ActionFn(7);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action7::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (5, 13)
    }
    pub(crate) fn __reduce24<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "gate", Span<Ident>, MaybeList<Span<Ident>>, Sep<Span<Ident>, ",">, "{", "}" => ActionFn(132);
        assert!(__symbols.len() >= 6);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym5.2.clone();
        let __nt = super::__action132::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (6, 13)
    }
    pub(crate) fn __reduce25<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = "gate", Span<Ident>, MaybeList<Span<Ident>>, Sep<Span<Ident>, ",">, "{", Span<Stmt>+, "}" => ActionFn(133);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant0(__symbols);
        let __sym5 = __pop_Variant24(__symbols);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant17(__symbols);
        let __sym2 = __pop_Variant17(__symbols);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action133::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (7, 13)
    }
    pub(crate) fn __reduce26<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Decl = Span<Stmt> => ActionFn(9);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action9::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant13(__nt), __end));
        (1, 13)
    }
    pub(crate) fn __reduce27<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = Span<Expr>, "+", Span<ExprTerm> => ActionFn(17);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action17::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 14)
    }
    pub(crate) fn __reduce28<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = Span<Expr>, "-", Span<ExprTerm> => ActionFn(18);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action18::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 14)
    }
    pub(crate) fn __reduce29<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Expr = ExprTerm => ActionFn(19);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action19::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 14)
    }
    pub(crate) fn __reduce30<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "pi" => ActionFn(26);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action26::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce31<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = Real => ActionFn(27);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action27::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce32<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = Int => ActionFn(28);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action28::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce33<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = Ident => ActionFn(29);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action29::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 15)
    }
    pub(crate) fn __reduce34<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "sin", "(", Span<Expr>, ")" => ActionFn(30);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action30::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce35<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "cos", "(", Span<Expr>, ")" => ActionFn(31);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action31::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce36<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "tan", "(", Span<Expr>, ")" => ActionFn(32);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action32::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce37<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "exp", "(", Span<Expr>, ")" => ActionFn(33);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action33::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce38<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "ln", "(", Span<Expr>, ")" => ActionFn(34);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action34::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce39<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "sqrt", "(", Span<Expr>, ")" => ActionFn(35);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action35::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (4, 15)
    }
    pub(crate) fn __reduce40<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprAtom = "(", Expr, ")" => ActionFn(36);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant14(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action36::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 15)
    }
    pub(crate) fn __reduce41<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprFactor = "-", Span<ExprFactor> => ActionFn(23);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action23::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (2, 16)
    }
    pub(crate) fn __reduce42<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprFactor = Span<ExprAtom>, "^", Span<ExprFactor> => ActionFn(24);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action24::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 16)
    }
    pub(crate) fn __reduce43<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprFactor = ExprAtom => ActionFn(25);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action25::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 16)
    }
    pub(crate) fn __reduce44<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprTerm = Span<ExprTerm>, "*", Span<ExprFactor> => ActionFn(20);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action20::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce45<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprTerm = Span<ExprTerm>, "/", Span<ExprFactor> => ActionFn(21);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action21::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (3, 17)
    }
    pub(crate) fn __reduce46<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // ExprTerm = ExprFactor => ActionFn(22);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action22::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant14(__nt), __end));
        (1, 17)
    }
    pub(crate) fn __reduce47<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Ident = identifier => ActionFn(39);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action39::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 18)
    }
    pub(crate) fn __reduce48<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included = "OPENQASM 2.0", ";" => ActionFn(126);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action126::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 19)
    }
    pub(crate) fn __reduce49<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included = "OPENQASM 2.0", ";", Span<Decl>+ => ActionFn(127);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action127::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 19)
    }
    pub(crate) fn __reduce50<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included =  => ActionFn(128);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action128::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (0, 19)
    }
    pub(crate) fn __reduce51<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Included = Span<Decl>+ => ActionFn(129);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action129::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 19)
    }
    pub(crate) fn __reduce52<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Int = integer => ActionFn(40);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action40::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant2(__nt), __end));
        (1, 20)
    }
    pub(crate) fn __reduce53<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Expr>> =  => ActionFn(47);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action47::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 21)
    }
    pub(crate) fn __reduce54<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Expr>> = "(", Sep<Span<Expr>, ",">, ")" => ActionFn(48);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action48::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (3, 21)
    }
    pub(crate) fn __reduce55<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Ident>> =  => ActionFn(57);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action57::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 22)
    }
    pub(crate) fn __reduce56<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // MaybeList<Span<Ident>> = "(", Sep<Span<Ident>, ",">, ")" => ActionFn(58);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant17(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action58::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (3, 22)
    }
    pub(crate) fn __reduce57<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Real = real => ActionFn(41);
        let __sym0 = __pop_Variant3(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action41::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant3(__nt), __end));
        (1, 23)
    }
    pub(crate) fn __reduce58<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Reg = Ident => ActionFn(37);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action37::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (1, 24)
    }
    pub(crate) fn __reduce59<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Reg = Ident, "[", Int, "]" => ActionFn(38);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant2(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action38::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant18(__nt), __end));
        (4, 24)
    }
    pub(crate) fn __reduce60<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Expr>, ","> =  => ActionFn(78);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action78::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (0, 25)
    }
    pub(crate) fn __reduce61<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Expr>, ","> = Span<Expr> => ActionFn(96);
        let __sym0 = __pop_Variant6(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action96::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (1, 25)
    }
    pub(crate) fn __reduce62<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Expr>, ","> = (<Span<Expr>> ",")+, Span<Expr> => ActionFn(97);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant6(__symbols);
        let __sym0 = __pop_Variant7(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action97::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant16(__nt), __end));
        (2, 25)
    }
    pub(crate) fn __reduce63<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Ident>, ","> =  => ActionFn(55);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action55::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (0, 26)
    }
    pub(crate) fn __reduce64<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Ident>, ","> = Span<Ident> => ActionFn(100);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action100::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (1, 26)
    }
    pub(crate) fn __reduce65<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Ident>, ","> = (<Span<Ident>> ",")+, Span<Ident> => ActionFn(101);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant8(__symbols);
        let __sym0 = __pop_Variant9(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action101::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant17(__nt), __end));
        (2, 26)
    }
    pub(crate) fn __reduce66<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Reg>, ","> =  => ActionFn(49);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action49::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (0, 27)
    }
    pub(crate) fn __reduce67<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Reg>, ","> = Span<Reg> => ActionFn(104);
        let __sym0 = __pop_Variant10(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action104::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (1, 27)
    }
    pub(crate) fn __reduce68<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Sep<Span<Reg>, ","> = (<Span<Reg>> ",")+, Span<Reg> => ActionFn(105);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant11(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action105::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant19(__nt), __end));
        (2, 27)
    }
    pub(crate) fn __reduce69<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl> = Decl => ActionFn(116);
        let __sym0 = __pop_Variant13(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action116::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant20(__nt), __end));
        (1, 28)
    }
    pub(crate) fn __reduce70<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>* =  => ActionFn(65);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action65::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (0, 29)
    }
    pub(crate) fn __reduce71<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>* = Span<Decl>+ => ActionFn(66);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action66::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 29)
    }
    pub(crate) fn __reduce72<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>+ = Span<Decl> => ActionFn(68);
        let __sym0 = __pop_Variant20(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action68::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (1, 30)
    }
    pub(crate) fn __reduce73<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Decl>+ = Span<Decl>+, Span<Decl> => ActionFn(69);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant20(__symbols);
        let __sym0 = __pop_Variant21(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action69::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant21(__nt), __end));
        (2, 30)
    }
    pub(crate) fn __reduce74<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Expr> = Expr => ActionFn(117);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action117::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 31)
    }
    pub(crate) fn __reduce75<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<ExprAtom> = ExprAtom => ActionFn(118);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action118::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 32)
    }
    pub(crate) fn __reduce76<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<ExprFactor> = ExprFactor => ActionFn(119);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action119::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 33)
    }
    pub(crate) fn __reduce77<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<ExprTerm> = ExprTerm => ActionFn(120);
        let __sym0 = __pop_Variant14(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action120::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant6(__nt), __end));
        (1, 34)
    }
    pub(crate) fn __reduce78<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Ident> = Ident => ActionFn(121);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action121::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 35)
    }
    pub(crate) fn __reduce79<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Int> = Int => ActionFn(122);
        let __sym0 = __pop_Variant2(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action122::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant22(__nt), __end));
        (1, 36)
    }
    pub(crate) fn __reduce80<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Reg> = Reg => ActionFn(123);
        let __sym0 = __pop_Variant18(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action123::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant10(__nt), __end));
        (1, 37)
    }
    pub(crate) fn __reduce81<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt> = Stmt => ActionFn(124);
        let __sym0 = __pop_Variant25(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action124::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant23(__nt), __end));
        (1, 38)
    }
    pub(crate) fn __reduce82<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>* =  => ActionFn(52);
        let __start = __lookahead_start.cloned().or_else(|| __symbols.last().map(|s| s.2.clone())).unwrap_or_default();
        let __end = __start.clone();
        let __nt = super::__action52::<>(file, &__start, &__end);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (0, 39)
    }
    pub(crate) fn __reduce83<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>* = Span<Stmt>+ => ActionFn(53);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action53::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 39)
    }
    pub(crate) fn __reduce84<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>+ = Span<Stmt> => ActionFn(73);
        let __sym0 = __pop_Variant23(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action73::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (1, 40)
    }
    pub(crate) fn __reduce85<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<Stmt>+ = Span<Stmt>+, Span<Stmt> => ActionFn(74);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant23(__symbols);
        let __sym0 = __pop_Variant24(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action74::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant24(__nt), __end));
        (2, 40)
    }
    pub(crate) fn __reduce86<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Span<String> = String => ActionFn(125);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action125::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant8(__nt), __end));
        (1, 41)
    }
    pub(crate) fn __reduce87<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "U", "(", Span<Expr>, ",", Span<Expr>, ",", Span<Expr>, ")", Span<Reg>, ";" => ActionFn(10);
        assert!(__symbols.len() >= 10);
        let __sym9 = __pop_Variant0(__symbols);
        let __sym8 = __pop_Variant10(__symbols);
        let __sym7 = __pop_Variant0(__symbols);
        let __sym6 = __pop_Variant6(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant6(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant6(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym9.2.clone();
        let __nt = super::__action10::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6, __sym7, __sym8, __sym9);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (10, 42)
    }
    pub(crate) fn __reduce88<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "CX", Span<Reg>, ",", Span<Reg>, ";" => ActionFn(11);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action11::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 42)
    }
    pub(crate) fn __reduce89<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "measure", Span<Reg>, "->", Span<Reg>, ";" => ActionFn(12);
        assert!(__symbols.len() >= 5);
        let __sym4 = __pop_Variant0(__symbols);
        let __sym3 = __pop_Variant10(__symbols);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym4.2.clone();
        let __nt = super::__action12::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (5, 42)
    }
    pub(crate) fn __reduce90<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "reset", Span<Reg>, ";" => ActionFn(13);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant10(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action13::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 42)
    }
    pub(crate) fn __reduce91<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "barrier", Sep<Span<Reg>, ",">, ";" => ActionFn(14);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant0(__symbols);
        let __sym1 = __pop_Variant19(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action14::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (3, 42)
    }
    pub(crate) fn __reduce92<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = Span<Ident>, MaybeList<Span<Expr>>, Sep<Span<Reg>, ",">, ";" => ActionFn(15);
        assert!(__symbols.len() >= 4);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant19(__symbols);
        let __sym1 = __pop_Variant16(__symbols);
        let __sym0 = __pop_Variant8(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym3.2.clone();
        let __nt = super::__action15::<>(file, __sym0, __sym1, __sym2, __sym3);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (4, 42)
    }
    pub(crate) fn __reduce93<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // Stmt = "if", "(", Span<Reg>, "==", Span<Int>, ")", Span<Stmt> => ActionFn(16);
        assert!(__symbols.len() >= 7);
        let __sym6 = __pop_Variant23(__symbols);
        let __sym5 = __pop_Variant0(__symbols);
        let __sym4 = __pop_Variant22(__symbols);
        let __sym3 = __pop_Variant0(__symbols);
        let __sym2 = __pop_Variant10(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym6.2.clone();
        let __nt = super::__action16::<>(file, __sym0, __sym1, __sym2, __sym3, __sym4, __sym5, __sym6);
        __symbols.push((__start, __Symbol::Variant25(__nt), __end));
        (7, 42)
    }
    pub(crate) fn __reduce94<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // String = string => ActionFn(42);
        let __sym0 = __pop_Variant1(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action42::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant1(__nt), __end));
        (1, 43)
    }
    pub(crate) fn __reduce95<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TopLevel = "OPENQASM 2.0", ";" => ActionFn(130);
        assert!(__symbols.len() >= 2);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym1.2.clone();
        let __nt = super::__action130::<>(file, __sym0, __sym1);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (2, 44)
    }
    pub(crate) fn __reduce96<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // TopLevel = "OPENQASM 2.0", ";", Span<Decl>+ => ActionFn(131);
        assert!(__symbols.len() >= 3);
        let __sym2 = __pop_Variant21(__symbols);
        let __sym1 = __pop_Variant0(__symbols);
        let __sym0 = __pop_Variant0(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym2.2.clone();
        let __nt = super::__action131::<>(file, __sym0, __sym1, __sym2);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (3, 44)
    }
    pub(crate) fn __reduce97<
    >(
        file: usize,
        __lookahead_start: Option<&usize>,
        __symbols: &mut alloc::vec::Vec<(usize,__Symbol<>,usize)>,
        _: core::marker::PhantomData<()>,
    ) -> (usize, usize)
    {
        // __Included = Included => ActionFn(1);
        let __sym0 = __pop_Variant15(__symbols);
        let __start = __sym0.0.clone();
        let __end = __sym0.2.clone();
        let __nt = super::__action1::<>(file, __sym0);
        __symbols.push((__start, __Symbol::Variant15(__nt), __end));
        (1, 45)
    }
}
pub(crate) use self::__parse__TopLevel::TopLevelParser;

#[allow(unused_variables)]
fn __action0<
>(
    file: usize,
    (_, __0, _): (usize, Program, usize),
) -> Program
{
    __0
}

#[allow(unused_variables)]
fn __action1<
>(
    file: usize,
    (_, __0, _): (usize, Program, usize),
) -> Program
{
    __0
}

#[allow(unused_variables)]
fn __action2<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, decls, _): (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> Program
{
    Program { decls }
}

#[allow(unused_variables)]
fn __action3<
>(
    file: usize,
    (_, _, _): (usize, core::option::Option<(Token, Token)>, usize),
    (_, decls, _): (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> Program
{
    Program { decls }
}

#[allow(unused_variables)]
fn __action4<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, filename, _): (usize, Span<Symbol>, usize),
    (_, _, _): (usize, Token, usize),
) -> Decl
{
    Decl::Include { file: filename }
}

#[allow(unused_variables)]
fn __action5<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, reg, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
) -> Decl
{
    Decl::QReg { reg }
}

#[allow(unused_variables)]
fn __action6<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, reg, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
) -> Decl
{
    Decl::CReg { reg }
}

#[allow(unused_variables)]
fn __action7<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, name, _): (usize, Span<Symbol>, usize),
    (_, params, _): (usize, Vec<Span<Symbol>>, usize),
    (_, args, _): (usize, Vec<Span<Symbol>>, usize),
    (_, _, _): (usize, Token, usize),
) -> Decl
{
    Decl::Def { name, params, args, body: None }
}

#[allow(unused_variables)]
fn __action8<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, name, _): (usize, Span<Symbol>, usize),
    (_, params, _): (usize, Vec<Span<Symbol>>, usize),
    (_, args, _): (usize, Vec<Span<Symbol>>, usize),
    (_, _, _): (usize, Token, usize),
    (_, body, _): (usize, alloc::vec::Vec<Span<Stmt>>, usize),
    (_, _, _): (usize, Token, usize),
) -> Decl
{
    Decl::Def { name, params, args, body: Some(body) }
}

#[allow(unused_variables)]
fn __action9<
>(
    file: usize,
    (_, __0, _): (usize, Span<Stmt>, usize),
) -> Decl
{
    Decl::Stmt(__0)
}

#[allow(unused_variables)]
fn __action10<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, theta, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, phi, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, lambda, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, reg, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
) -> Stmt
{
    Stmt::U { theta, phi, lambda, reg}
}

#[allow(unused_variables)]
fn __action11<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, copy, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
    (_, xor, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
) -> Stmt
{
    Stmt::CX { copy, xor }
}

#[allow(unused_variables)]
fn __action12<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, from, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
    (_, to, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
) -> Stmt
{
    Stmt::Measure { from, to }
}

#[allow(unused_variables)]
fn __action13<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, reg, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
) -> Stmt
{
    Stmt::Reset { reg }
}

#[allow(unused_variables)]
fn __action14<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, regs, _): (usize, Vec<Span<Reg>>, usize),
    (_, _, _): (usize, Token, usize),
) -> Stmt
{
    Stmt::Barrier { regs }
}

#[allow(unused_variables)]
fn __action15<
>(
    file: usize,
    (_, name, _): (usize, Span<Symbol>, usize),
    (_, params, _): (usize, Vec<Span<Expr>>, usize),
    (_, args, _): (usize, Vec<Span<Reg>>, usize),
    (_, _, _): (usize, Token, usize),
) -> Stmt
{
    Stmt::Gate { name, params, args }
}

#[allow(unused_variables)]
fn __action16<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, reg, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
    (_, val, _): (usize, Span<u64>, usize),
    (_, _, _): (usize, Token, usize),
    (_, then, _): (usize, Span<Stmt>, usize),
) -> Stmt
{
    Stmt::Conditional { reg, val, then }
}

#[allow(unused_variables)]
fn __action17<
>(
    file: usize,
    (_, l, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, r, _): (usize, Span<Expr>, usize),
) -> Expr
{
    Expr::Add(l, r)
}

#[allow(unused_variables)]
fn __action18<
>(
    file: usize,
    (_, l, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, r, _): (usize, Span<Expr>, usize),
) -> Expr
{
    Expr::Sub(l, r)
}

#[allow(unused_variables)]
fn __action19<
>(
    file: usize,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action20<
>(
    file: usize,
    (_, l, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, r, _): (usize, Span<Expr>, usize),
) -> Expr
{
    Expr::Mul(l, r)
}

#[allow(unused_variables)]
fn __action21<
>(
    file: usize,
    (_, l, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, r, _): (usize, Span<Expr>, usize),
) -> Expr
{
    Expr::Div(l, r)
}

#[allow(unused_variables)]
fn __action22<
>(
    file: usize,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action23<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Span<Expr>, usize),
) -> Expr
{
    Expr::Neg(__0)
}

#[allow(unused_variables)]
fn __action24<
>(
    file: usize,
    (_, l, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
    (_, r, _): (usize, Span<Expr>, usize),
) -> Expr
{
    Expr::Pow(l, r)
}

#[allow(unused_variables)]
fn __action25<
>(
    file: usize,
    (_, __0, _): (usize, Expr, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action26<
>(
    file: usize,
    (_, __0, _): (usize, Token, usize),
) -> Expr
{
    Expr::Pi
}

#[allow(unused_variables)]
fn __action27<
>(
    file: usize,
    (_, __0, _): (usize, f32, usize),
) -> Expr
{
    Expr::Real(__0)
}

#[allow(unused_variables)]
fn __action28<
>(
    file: usize,
    (_, __0, _): (usize, u64, usize),
) -> Expr
{
    Expr::Int(__0)
}

#[allow(unused_variables)]
fn __action29<
>(
    file: usize,
    (_, __0, _): (usize, Symbol, usize),
) -> Expr
{
    Expr::Var(__0)
}

#[allow(unused_variables)]
fn __action30<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
) -> Expr
{
    Expr::Sin(__0)
}

#[allow(unused_variables)]
fn __action31<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
) -> Expr
{
    Expr::Cos(__0)
}

#[allow(unused_variables)]
fn __action32<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
) -> Expr
{
    Expr::Tan(__0)
}

#[allow(unused_variables)]
fn __action33<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
) -> Expr
{
    Expr::Exp(__0)
}

#[allow(unused_variables)]
fn __action34<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
) -> Expr
{
    Expr::Ln(__0)
}

#[allow(unused_variables)]
fn __action35<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
) -> Expr
{
    Expr::Sqrt(__0)
}

#[allow(unused_variables)]
fn __action36<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Expr, usize),
    (_, _, _): (usize, Token, usize),
) -> Expr
{
    __0
}

#[allow(unused_variables)]
fn __action37<
>(
    file: usize,
    (_, name, _): (usize, Symbol, usize),
) -> Reg
{
    Reg { name, index: None }
}

#[allow(unused_variables)]
fn __action38<
>(
    file: usize,
    (_, name, _): (usize, Symbol, usize),
    (_, _, _): (usize, Token, usize),
    (_, index, _): (usize, u64, usize),
    (_, _, _): (usize, Token, usize),
) -> Reg
{
    Reg { name, index: Some(index) }
}

#[allow(unused_variables)]
fn __action39<
>(
    file: usize,
    (_, __0, _): (usize, Symbol, usize),
) -> Symbol
{
    __0
}

#[allow(unused_variables)]
fn __action40<
>(
    file: usize,
    (_, __0, _): (usize, u64, usize),
) -> u64
{
    __0
}

#[allow(unused_variables)]
fn __action41<
>(
    file: usize,
    (_, __0, _): (usize, f32, usize),
) -> f32
{
    __0
}

#[allow(unused_variables)]
fn __action42<
>(
    file: usize,
    (_, __0, _): (usize, Symbol, usize),
) -> Symbol
{
    __0
}

#[allow(unused_variables)]
fn __action43<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Expr, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Expr>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action44<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Expr, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Expr>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action45<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Expr, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Expr>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action46<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, u64, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<u64>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action47<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Span<Expr>>
{
    Vec::new()
}

#[allow(unused_variables)]
fn __action48<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Vec<Span<Expr>>, usize),
    (_, _, _): (usize, Token, usize),
) -> Vec<Span<Expr>>
{
    __0
}

#[allow(unused_variables)]
fn __action49<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Span<Reg>>
{
    Vec::new()
}

#[allow(unused_variables)]
fn __action50<
>(
    file: usize,
    (_, init, _): (usize, alloc::vec::Vec<Span<Reg>>, usize),
    (_, tail, _): (usize, Span<Reg>, usize),
) -> Vec<Span<Reg>>
{
    {
        let mut init = init;
        init.push(tail);
        init
    }
}

#[allow(unused_variables)]
fn __action51<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Expr, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Expr>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action52<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Span<Stmt>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action53<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Stmt>>, usize),
) -> alloc::vec::Vec<Span<Stmt>>
{
    v
}

#[allow(unused_variables)]
fn __action54<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Stmt, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Stmt>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action55<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Span<Symbol>>
{
    Vec::new()
}

#[allow(unused_variables)]
fn __action56<
>(
    file: usize,
    (_, init, _): (usize, alloc::vec::Vec<Span<Symbol>>, usize),
    (_, tail, _): (usize, Span<Symbol>, usize),
) -> Vec<Span<Symbol>>
{
    {
        let mut init = init;
        init.push(tail);
        init
    }
}

#[allow(unused_variables)]
fn __action57<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Span<Symbol>>
{
    Vec::new()
}

#[allow(unused_variables)]
fn __action58<
>(
    file: usize,
    (_, _, _): (usize, Token, usize),
    (_, __0, _): (usize, Vec<Span<Symbol>>, usize),
    (_, _, _): (usize, Token, usize),
) -> Vec<Span<Symbol>>
{
    __0
}

#[allow(unused_variables)]
fn __action59<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Symbol, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Symbol>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action60<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Reg, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Reg>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action61<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Symbol, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Symbol>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action62<
>(
    file: usize,
    (_, __0, _): (usize, (Token, Token), usize),
) -> core::option::Option<(Token, Token)>
{
    Some(__0)
}

#[allow(unused_variables)]
fn __action63<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> core::option::Option<(Token, Token)>
{
    None
}

#[allow(unused_variables)]
fn __action64<
>(
    file: usize,
    (_, __0, _): (usize, Token, usize),
    (_, __1, _): (usize, Token, usize),
) -> (Token, Token)
{
    (__0, __1)
}

#[allow(unused_variables)]
fn __action65<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Span<Decl>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action66<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> alloc::vec::Vec<Span<Decl>>
{
    v
}

#[allow(unused_variables)]
fn __action67<
>(
    file: usize,
    (_, left, _): (usize, usize, usize),
    (_, inner, _): (usize, Decl, usize),
    (_, right, _): (usize, usize, usize),
) -> Span<Decl>
{
    Span { span: FileSpan { start: left, end: right, file }, inner: Box::new(inner) }
}

#[allow(unused_variables)]
fn __action68<
>(
    file: usize,
    (_, __0, _): (usize, Span<Decl>, usize),
) -> alloc::vec::Vec<Span<Decl>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action69<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Decl>>, usize),
    (_, e, _): (usize, Span<Decl>, usize),
) -> alloc::vec::Vec<Span<Decl>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action70<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Span<Symbol>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action71<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Symbol>>, usize),
) -> alloc::vec::Vec<Span<Symbol>>
{
    v
}

#[allow(unused_variables)]
fn __action72<
>(
    file: usize,
    (_, __0, _): (usize, Span<Symbol>, usize),
    (_, _, _): (usize, Token, usize),
) -> Span<Symbol>
{
    __0
}

#[allow(unused_variables)]
fn __action73<
>(
    file: usize,
    (_, __0, _): (usize, Span<Stmt>, usize),
) -> alloc::vec::Vec<Span<Stmt>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action74<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Stmt>>, usize),
    (_, e, _): (usize, Span<Stmt>, usize),
) -> alloc::vec::Vec<Span<Stmt>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action75<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Span<Reg>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action76<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Reg>>, usize),
) -> alloc::vec::Vec<Span<Reg>>
{
    v
}

#[allow(unused_variables)]
fn __action77<
>(
    file: usize,
    (_, __0, _): (usize, Span<Reg>, usize),
    (_, _, _): (usize, Token, usize),
) -> Span<Reg>
{
    __0
}

#[allow(unused_variables)]
fn __action78<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Vec<Span<Expr>>
{
    Vec::new()
}

#[allow(unused_variables)]
fn __action79<
>(
    file: usize,
    (_, init, _): (usize, alloc::vec::Vec<Span<Expr>>, usize),
    (_, tail, _): (usize, Span<Expr>, usize),
) -> Vec<Span<Expr>>
{
    {
        let mut init = init;
        init.push(tail);
        init
    }
}

#[allow(unused_variables)]
fn __action80<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookbehind.clone()
}

#[allow(unused_variables)]
fn __action81<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> usize
{
    __lookahead.clone()
}

#[allow(unused_variables)]
fn __action82<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> alloc::vec::Vec<Span<Expr>>
{
    alloc::vec![]
}

#[allow(unused_variables)]
fn __action83<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Expr>>, usize),
) -> alloc::vec::Vec<Span<Expr>>
{
    v
}

#[allow(unused_variables)]
fn __action84<
>(
    file: usize,
    (_, __0, _): (usize, Span<Expr>, usize),
    (_, _, _): (usize, Token, usize),
) -> Span<Expr>
{
    __0
}

#[allow(unused_variables)]
fn __action85<
>(
    file: usize,
    (_, __0, _): (usize, Span<Reg>, usize),
) -> alloc::vec::Vec<Span<Reg>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action86<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Reg>>, usize),
    (_, e, _): (usize, Span<Reg>, usize),
) -> alloc::vec::Vec<Span<Reg>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action87<
>(
    file: usize,
    (_, __0, _): (usize, Span<Symbol>, usize),
) -> alloc::vec::Vec<Span<Symbol>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action88<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Symbol>>, usize),
    (_, e, _): (usize, Span<Symbol>, usize),
) -> alloc::vec::Vec<Span<Symbol>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action89<
>(
    file: usize,
    (_, __0, _): (usize, Span<Expr>, usize),
) -> alloc::vec::Vec<Span<Expr>>
{
    alloc::vec![__0]
}

#[allow(unused_variables)]
fn __action90<
>(
    file: usize,
    (_, v, _): (usize, alloc::vec::Vec<Span<Expr>>, usize),
    (_, e, _): (usize, Span<Expr>, usize),
) -> alloc::vec::Vec<Span<Expr>>
{
    { let mut v = v; v.push(e); v }
}

#[allow(unused_variables)]
fn __action91<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Token, usize),
) -> core::option::Option<(Token, Token)>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action64(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action62(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action92<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Token, usize),
    __2: (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> Program
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action91(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        file,
        __temp0,
        __2,
    )
}

#[allow(unused_variables)]
fn __action93<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> Program
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action63(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action3(
        file,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action94<
>(
    file: usize,
    __0: (usize, Span<Expr>, usize),
    __1: (usize, Token, usize),
) -> alloc::vec::Vec<Span<Expr>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action84(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action89(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action95<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Expr>>, usize),
    __1: (usize, Span<Expr>, usize),
    __2: (usize, Token, usize),
) -> alloc::vec::Vec<Span<Expr>>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action84(
        file,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action90(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action96<
>(
    file: usize,
    __0: (usize, Span<Expr>, usize),
) -> Vec<Span<Expr>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action82(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        file,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action97<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Expr>>, usize),
    __1: (usize, Span<Expr>, usize),
) -> Vec<Span<Expr>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action83(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action79(
        file,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action98<
>(
    file: usize,
    __0: (usize, Span<Symbol>, usize),
    __1: (usize, Token, usize),
) -> alloc::vec::Vec<Span<Symbol>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action72(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action87(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action99<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Symbol>>, usize),
    __1: (usize, Span<Symbol>, usize),
    __2: (usize, Token, usize),
) -> alloc::vec::Vec<Span<Symbol>>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action72(
        file,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action88(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action100<
>(
    file: usize,
    __0: (usize, Span<Symbol>, usize),
) -> Vec<Span<Symbol>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action70(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        file,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action101<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Symbol>>, usize),
    __1: (usize, Span<Symbol>, usize),
) -> Vec<Span<Symbol>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action71(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action56(
        file,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action102<
>(
    file: usize,
    __0: (usize, Span<Reg>, usize),
    __1: (usize, Token, usize),
) -> alloc::vec::Vec<Span<Reg>>
{
    let __start0 = __0.0.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action77(
        file,
        __0,
        __1,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action85(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action103<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Reg>>, usize),
    __1: (usize, Span<Reg>, usize),
    __2: (usize, Token, usize),
) -> alloc::vec::Vec<Span<Reg>>
{
    let __start0 = __1.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action77(
        file,
        __1,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action86(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action104<
>(
    file: usize,
    __0: (usize, Span<Reg>, usize),
) -> Vec<Span<Reg>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action75(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        file,
        __temp0,
        __0,
    )
}

#[allow(unused_variables)]
fn __action105<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Reg>>, usize),
    __1: (usize, Span<Reg>, usize),
) -> Vec<Span<Reg>>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action76(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action50(
        file,
        __temp0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action106<
>(
    file: usize,
    __0: (usize, Decl, usize),
    __1: (usize, usize, usize),
) -> Span<Decl>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action67(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action107<
>(
    file: usize,
    __0: (usize, Expr, usize),
    __1: (usize, usize, usize),
) -> Span<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action51(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action108<
>(
    file: usize,
    __0: (usize, Expr, usize),
    __1: (usize, usize, usize),
) -> Span<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action43(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action109<
>(
    file: usize,
    __0: (usize, Expr, usize),
    __1: (usize, usize, usize),
) -> Span<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action44(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action110<
>(
    file: usize,
    __0: (usize, Expr, usize),
    __1: (usize, usize, usize),
) -> Span<Expr>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action45(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action111<
>(
    file: usize,
    __0: (usize, Symbol, usize),
    __1: (usize, usize, usize),
) -> Span<Symbol>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action59(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action112<
>(
    file: usize,
    __0: (usize, u64, usize),
    __1: (usize, usize, usize),
) -> Span<u64>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action46(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action113<
>(
    file: usize,
    __0: (usize, Reg, usize),
    __1: (usize, usize, usize),
) -> Span<Reg>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action60(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action114<
>(
    file: usize,
    __0: (usize, Stmt, usize),
    __1: (usize, usize, usize),
) -> Span<Stmt>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action54(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action115<
>(
    file: usize,
    __0: (usize, Symbol, usize),
    __1: (usize, usize, usize),
) -> Span<Symbol>
{
    let __start0 = __0.0.clone();
    let __end0 = __0.0.clone();
    let __temp0 = __action81(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action61(
        file,
        __temp0,
        __0,
        __1,
    )
}

#[allow(unused_variables)]
fn __action116<
>(
    file: usize,
    __0: (usize, Decl, usize),
) -> Span<Decl>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action106(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action117<
>(
    file: usize,
    __0: (usize, Expr, usize),
) -> Span<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action107(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action118<
>(
    file: usize,
    __0: (usize, Expr, usize),
) -> Span<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action108(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action119<
>(
    file: usize,
    __0: (usize, Expr, usize),
) -> Span<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action109(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action120<
>(
    file: usize,
    __0: (usize, Expr, usize),
) -> Span<Expr>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action110(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action121<
>(
    file: usize,
    __0: (usize, Symbol, usize),
) -> Span<Symbol>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action111(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action122<
>(
    file: usize,
    __0: (usize, u64, usize),
) -> Span<u64>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action112(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action123<
>(
    file: usize,
    __0: (usize, Reg, usize),
) -> Span<Reg>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action113(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action124<
>(
    file: usize,
    __0: (usize, Stmt, usize),
) -> Span<Stmt>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action114(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action125<
>(
    file: usize,
    __0: (usize, Symbol, usize),
) -> Span<Symbol>
{
    let __start0 = __0.2.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action80(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action115(
        file,
        __0,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action126<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Token, usize),
) -> Program
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action65(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action127<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Token, usize),
    __2: (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> Program
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action66(
        file,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action92(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action128<
>(
    file: usize,
    __lookbehind: &usize,
    __lookahead: &usize,
) -> Program
{
    let __start0 = __lookbehind.clone();
    let __end0 = __lookahead.clone();
    let __temp0 = __action65(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action129<
>(
    file: usize,
    __0: (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> Program
{
    let __start0 = __0.0.clone();
    let __end0 = __0.2.clone();
    let __temp0 = __action66(
        file,
        __0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action93(
        file,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action130<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Token, usize),
) -> Program
{
    let __start0 = __1.2.clone();
    let __end0 = __1.2.clone();
    let __temp0 = __action65(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action131<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Token, usize),
    __2: (usize, alloc::vec::Vec<Span<Decl>>, usize),
) -> Program
{
    let __start0 = __2.0.clone();
    let __end0 = __2.2.clone();
    let __temp0 = __action66(
        file,
        __2,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action2(
        file,
        __0,
        __1,
        __temp0,
    )
}

#[allow(unused_variables)]
fn __action132<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Span<Symbol>, usize),
    __2: (usize, Vec<Span<Symbol>>, usize),
    __3: (usize, Vec<Span<Symbol>>, usize),
    __4: (usize, Token, usize),
    __5: (usize, Token, usize),
) -> Decl
{
    let __start0 = __4.2.clone();
    let __end0 = __5.0.clone();
    let __temp0 = __action52(
        file,
        &__start0,
        &__end0,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        file,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __5,
    )
}

#[allow(unused_variables)]
fn __action133<
>(
    file: usize,
    __0: (usize, Token, usize),
    __1: (usize, Span<Symbol>, usize),
    __2: (usize, Vec<Span<Symbol>>, usize),
    __3: (usize, Vec<Span<Symbol>>, usize),
    __4: (usize, Token, usize),
    __5: (usize, alloc::vec::Vec<Span<Stmt>>, usize),
    __6: (usize, Token, usize),
) -> Decl
{
    let __start0 = __5.0.clone();
    let __end0 = __5.2.clone();
    let __temp0 = __action53(
        file,
        __5,
    );
    let __temp0 = (__start0, __temp0, __end0);
    __action8(
        file,
        __0,
        __1,
        __2,
        __3,
        __4,
        __temp0,
        __6,
    )
}

pub trait __ToTriple<>
{
    fn to_triple(value: Self) -> Result<(usize,Token,usize), __lalrpop_util::ParseError<usize, Token, FileSpan>>;
}

impl<> __ToTriple<> for (usize, Token, usize)
{
    fn to_triple(value: Self) -> Result<(usize,Token,usize), __lalrpop_util::ParseError<usize, Token, FileSpan>> {
        Ok(value)
    }
}
impl<> __ToTriple<> for Result<(usize, Token, usize), FileSpan>
{
    fn to_triple(value: Self) -> Result<(usize,Token,usize), __lalrpop_util::ParseError<usize, Token, FileSpan>> {
        match value {
            Ok(v) => Ok(v),
            Err(error) => Err(__lalrpop_util::ParseError::User { error }),
        }
    }
}
